{
  "address": "0xA2E059AF8F9a545C4ed3f89964Bf1FaC02eA51A6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "used",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spareVana",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unusedVana",
          "type": "uint256"
        }
      ],
      "name": "DLPRewardSwap__AmountMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "DLPRewardSwap__InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__InvalidLpTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__InvalidRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__InvalidRewardPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__InvalidSlippagePercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__LPAmountMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "expected",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "actual",
          "type": "uint128"
        }
      ],
      "name": "DLPRewardSwap__LiquidityMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "DLPRewardSwap__SpareAmountMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "DLPRewardSwap__VanaInMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__ZeroAmountSwapIn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DLPRewardSwap__ZeroLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "T",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usedVanaForReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenRewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usedVanaForLp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spareVana",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spareToken",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VANA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "contract ISwapHelper",
          "name": "initSwapHelper",
          "type": "address"
        },
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "initPositionManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumSlippagePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDLPRewardSwap.QuoteSplitRewardSwapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteSplitRewardSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenRewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spareToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spareVana",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedVanaAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumSlippagePercentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardRecipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spareRecipient",
              "type": "address"
            }
          ],
          "internalType": "struct IDLPRewardSwap.SplitRewardSwapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "splitRewardSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenRewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spareToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spareVana",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedVanaAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapHelper",
      "outputs": [
        {
          "internalType": "contract ISwapHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "newPositionManager",
          "type": "address"
        }
      ],
      "name": "updatePositionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapHelper",
          "name": "newSwapHelper",
          "type": "address"
        }
      ],
      "name": "updateSwapHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcccc99228a1f00267bdda33a67faad0e9245a6b007359f4879256cee7de2bcc0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2AC93684679a5bdA03C6160def908CdB8D46792f",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3237847",
    "logsBloom": "0x
    "blockHash": "0x0f98d52c25b0542fa06f7da6a608d7ef0758a3e200816886e4307de86b64d2c0",
    "transactionHash": "0xcccc99228a1f00267bdda33a67faad0e9245a6b007359f4879256cee7de2bcc0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2566020,
        "transactionHash": "0xcccc99228a1f00267bdda33a67faad0e9245a6b007359f4879256cee7de2bcc0",
        "address": "0xA2E059AF8F9a545C4ed3f89964Bf1FaC02eA51A6",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x0f98d52c25b0542fa06f7da6a608d7ef0758a3e200816886e4307de86b64d2c0"
      }
    ],
    "blockNumber": 2566020,
    "cumulativeGasUsed": "3237847",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b7c44af213c9be70c92f403058a0e2f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spareVana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unusedVana\",\"type\":\"uint256\"}],\"name\":\"DLPRewardSwap__AmountMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DLPRewardSwap__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__InvalidLpTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__InvalidRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__InvalidRewardPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__InvalidSlippagePercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__LPAmountMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"expected\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"actual\",\"type\":\"uint128\"}],\"name\":\"DLPRewardSwap__LiquidityMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DLPRewardSwap__SpareAmountMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DLPRewardSwap__VanaInMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__ZeroAmountSwapIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DLPRewardSwap__ZeroLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"T\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedVanaForReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedVanaForLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spareVana\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spareToken\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VANA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract ISwapHelper\",\"name\":\"initSwapHelper\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"initPositionManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumSlippagePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IDLPRewardSwap.QuoteSplitRewardSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteSplitRewardSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spareToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spareVana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedVanaAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumSlippagePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spareRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IDLPRewardSwap.SplitRewardSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"splitRewardSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spareToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spareVana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedVanaAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapHelper\",\"outputs\":[{\"internalType\":\"contract ISwapHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"newPositionManager\",\"type\":\"address\"}],\"name\":\"updatePositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapHelper\",\"name\":\"newSwapHelper\",\"type\":\"address\"}],\"name\":\"updateSwapHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updatePositionManager(address)\":{\"params\":{\"newPositionManager\":\"The address of the new Uniswap position manager contract\"}},\"updateSwapHelper(address)\":{\"params\":{\"newSwapHelper\":\"The address of the new swap helper contract\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"returns\":{\"_0\":\"The version of the contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address)\":{\"notice\":\"Initializes the contract\"},\"pause()\":{\"notice\":\"Pauses the contract\"},\"positionManager()\":{\"notice\":\"Returns the address of the Uniswap position manager contract\"},\"swapHelper()\":{\"notice\":\"Returns the address of the swap helper contract\"},\"unpause()\":{\"notice\":\"Unpauses the contract\"},\"updatePositionManager(address)\":{\"notice\":\"Updates the address of the Uniswap position manager contract\"},\"updateSwapHelper(address)\":{\"notice\":\"Updates the address of the swap helper contract\"},\"version()\":{\"notice\":\"Returns the current version of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dlpRewardSwap/DLPRewardSwapImplementation.sol\":\"DLPRewardSwapImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dlpRewardSwap/DLPRewardSwapImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../swapHelper/libraries/SqrtPriceMath.sol\\\";\\nimport \\\"../swapHelper/libraries/TickMath.sol\\\";\\nimport \\\"../swapHelper/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"./interfaces/DLPRewardSwapStorageV1.sol\\\";\\n\\ncontract DLPRewardSwapImplementation is\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DLPRewardSwapStorageV1\\n{\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n    address public constant VANA = address(0);\\n    uint256 public constant ONE_HUNDRED_PERCENT = 100e18;\\n\\n    receive() external payable {}\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract\\n    function initialize(\\n        address ownerAddress,\\n        ISwapHelper initSwapHelper,\\n        INonfungiblePositionManager initPositionManager\\n    ) external initializer {\\n        __UUPSUpgradeable_init();\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        swapHelper = initSwapHelper;\\n        positionManager = initPositionManager;\\n\\n        _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n        _grantRole(DEFAULT_ADMIN_ROLE, ownerAddress);\\n        _grantRole(MAINTAINER_ROLE, ownerAddress);\\n    }\\n\\n    /// @notice Upgrades the contract to a new implementation\\n    /// @param newImplementation The address of the new implementation\\n    /// @dev This function is called by the UUPS proxy to authorize upgrades\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    function version() external pure virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function pause() external override onlyRole(MAINTAINER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(MAINTAINER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function updateSwapHelper(ISwapHelper newSwapHelper) external override onlyRole(MAINTAINER_ROLE) {\\n        require(address(newSwapHelper) != address(0), DLPRewardSwap__ZeroAddress());\\n        swapHelper = newSwapHelper;\\n    }\\n\\n    function updatePositionManager(\\n        INonfungiblePositionManager newPositionManager\\n    ) external override onlyRole(MAINTAINER_ROLE) {\\n        require(address(newPositionManager) != address(0), DLPRewardSwap__ZeroAddress());\\n        positionManager = newPositionManager;\\n    }\\n\\n    function getAmountsDelta(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioLowerX96,\\n        uint160 sqrtRatioUpperX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        require(sqrtRatioLowerX96 <= sqrtRatioUpperX96, DLPRewardSwap__InvalidRange());\\n\\n        if (sqrtRatioX96 <= sqrtRatioLowerX96) {\\n            amount0 = SqrtPriceMath.getAmount0Delta(sqrtRatioLowerX96, sqrtRatioUpperX96, liquidity, true);\\n        } else if (sqrtRatioX96 < sqrtRatioUpperX96) {\\n            amount0 = SqrtPriceMath.getAmount0Delta(sqrtRatioX96, sqrtRatioUpperX96, liquidity, true);\\n            amount1 = SqrtPriceMath.getAmount1Delta(sqrtRatioLowerX96, sqrtRatioX96, liquidity, true);\\n        } else {\\n            amount1 = SqrtPriceMath.getAmount1Delta(sqrtRatioLowerX96, sqrtRatioUpperX96, liquidity, true);\\n        }\\n    }\\n\\n    function quoteLpSwap(QuoteLpSwapParams memory params) internal returns (LpSwapQuote memory res) {\\n        require(params.amountIn > 0, DLPRewardSwap__ZeroAmount());\\n        require(params.tokenOut != address(0), DLPRewardSwap__ZeroAddress());\\n        require(params.sqrtRatioLowerX96 <= params.sqrtRatioUpperX96, DLPRewardSwap__InvalidRange());\\n\\n        IWVANA WVANA = swapHelper.WVANA();\\n        address tokenIn = params.tokenIn == VANA ? address(WVANA) : params.tokenIn;\\n        address tokenOut = params.tokenOut == VANA ? address(WVANA) : params.tokenOut;\\n\\n        IUniswapV3Pool pool = swapHelper.getPool(tokenIn, tokenOut, params.fee);\\n        (uint160 currentSqrtPriceX96, , , , , , ) = pool.slot0();\\n\\n        uint128 currentLiquidity = pool.liquidity();\\n\\n        bool zeroForOne = tokenIn < tokenOut;\\n\\n        uint128 bestLiquidityDelta = 0;\\n        uint256 bestAmount0Used = 0;\\n        uint256 bestAmount1Used = 0;\\n\\n        /// @dev Cases of increaseLiquidity without swap, so the price does not move\\n        if (currentSqrtPriceX96 <= params.sqrtRatioLowerX96 && zeroForOne) {\\n            /// @dev The current sqrtPriceX96 is below the specified range.\\n            /// The position is only activated when the price goes up\\n            /// (aka only when the pool sells token0).\\n            /// Thus, only tokenIn (token0) is provided and no need to swap.\\n            bestLiquidityDelta = LiquidityAmounts.getLiquidityForAmount0(\\n                params.sqrtRatioLowerX96,\\n                params.sqrtRatioUpperX96,\\n                params.amountIn\\n            );\\n            bestAmount0Used = SqrtPriceMath.getAmount0Delta(\\n                params.sqrtRatioLowerX96,\\n                params.sqrtRatioUpperX96,\\n                bestLiquidityDelta,\\n                true\\n            );\\n            return\\n                LpSwapQuote({\\n                    amountSwapIn: 0,\\n                    spareIn: params.amountIn - bestAmount0Used,\\n                    spareOut: 0,\\n                    liquidityDelta: bestLiquidityDelta,\\n                    sqrtPriceX96After: currentSqrtPriceX96\\n                });\\n        }\\n\\n        if (currentSqrtPriceX96 >= params.sqrtRatioUpperX96 && !zeroForOne) {\\n            /// @dev The current sqrtPriceX96 is above the specified range.\\n            /// The position is only activated when the price goes down\\n            /// (aka only when the pool sells token1).\\n            /// Thus, only tokenIn (token1) is provided and no need to swap.\\n            bestLiquidityDelta = LiquidityAmounts.getLiquidityForAmount1(\\n                params.sqrtRatioLowerX96,\\n                params.sqrtRatioUpperX96,\\n                params.amountIn\\n            );\\n            bestAmount1Used = SqrtPriceMath.getAmount1Delta(\\n                params.sqrtRatioLowerX96,\\n                params.sqrtRatioUpperX96,\\n                bestLiquidityDelta,\\n                true\\n            );\\n            return\\n                LpSwapQuote({\\n                    amountSwapIn: 0,\\n                    spareIn: params.amountIn - bestAmount1Used,\\n                    spareOut: 0,\\n                    liquidityDelta: bestLiquidityDelta,\\n                    sqrtPriceX96After: currentSqrtPriceX96\\n                });\\n        }\\n\\n        /// @dev Cases of increaseLiquidity with swap from tokenIn to tokenOut.\\n        /// The price moves down if tokenIn is token0, up if tokenIn is token1.\\n\\n        uint256 low = 1;\\n        uint256 high = params.amountIn;\\n        uint256 bestSwapIn = 0;\\n        uint256 bestSwapOut = 0;\\n        uint160 bestSqrtPriceX96After = 0;\\n\\n        while (low < high) {\\n            uint256 mid = low + (high - low) / 2;\\n\\n            ISwapHelper.Quote memory quote = swapHelper.quoteSlippageExactInputSingle(\\n                ISwapHelper.QuoteSlippageExactInputSingleParams({\\n                    tokenIn: tokenIn,\\n                    tokenOut: tokenOut,\\n                    fee: params.fee,\\n                    amountIn: mid,\\n                    sqrtPriceX96: currentSqrtPriceX96,\\n                    liquidity: currentLiquidity,\\n                    maximumSlippagePercentage: params.maximumSlippagePercentage\\n                })\\n            );\\n\\n            /// @dev Amounts to be added to the position after the swap.\\n            uint256 amount0 = zeroForOne ? params.amountIn - quote.amountToPay : quote.amountReceived;\\n            uint256 amount1 = zeroForOne ? quote.amountReceived : params.amountIn - quote.amountToPay;\\n\\n            uint128 liquidityDelta;\\n\\n            if (quote.sqrtPriceX96After <= params.sqrtRatioLowerX96) {\\n                liquidityDelta = LiquidityAmounts.getLiquidityForAmount0(\\n                    params.sqrtRatioLowerX96,\\n                    params.sqrtRatioUpperX96,\\n                    amount0\\n                );\\n\\n                if (zeroForOne) {\\n                    /// @dev All remaining tokenIn (token0) after the swap is added to the position,\\n                    /// while the tokenOut (token1) is not added to the pool. We should use less token0 in the swap,\\n                    /// so that more token0 can be added to the position.\\n                    /// zeroForOne purchase: sqrtPriceLimitX96 <= sqrtPriceX96After.\\n                    /// When using less token0 in the swap, the price goes up so the limit is not reached.\\n                    high = mid;\\n                } else {\\n                    /// @dev Only tokenOut (token0) is added to the position.\\n                    /// We should use more tokenIn (token1) in the swap to get more token0.\\n                    /// oneForZero purchase: sqrtPriceX96After <= sqrtPriceLimitX96.\\n                    /// When using more token1 in the swap, the price goes up to the limit.\\n                    /// If we reach the limit, when putting more token1, we still get the same amount of token0.\\n                    if (quote.sqrtPriceX96After == quote.sqrtPriceLimitX96) {\\n                        if (liquidityDelta > bestLiquidityDelta) {\\n                            bestLiquidityDelta = liquidityDelta;\\n                            bestSwapIn = quote.amountToPay;\\n                            bestSwapOut = quote.amountReceived;\\n                            bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n                        }\\n                        break;\\n                    }\\n                    low = mid + 1;\\n                }\\n            } else if (quote.sqrtPriceX96After < params.sqrtRatioUpperX96) {\\n                uint128 liquidity0 = LiquidityAmounts.getLiquidityForAmount0(\\n                    quote.sqrtPriceX96After,\\n                    params.sqrtRatioUpperX96,\\n                    amount0\\n                );\\n                uint128 liquidity1 = LiquidityAmounts.getLiquidityForAmount1(\\n                    params.sqrtRatioLowerX96,\\n                    quote.sqrtPriceX96After,\\n                    amount1\\n                );\\n                if (liquidity0 < liquidity1) {\\n                    liquidityDelta = liquidity0;\\n\\n                    /// @dev token0 is the limiting factor. We should have more token0\\n                    /// after the swap to increase the liquidity more.\\n                    if (zeroForOne) {\\n                        /// @dev We should use less token0 in the swap.\\n                        high = mid;\\n                    } else {\\n                        /// @dev token0 is tokenOut.\\n                        if (quote.sqrtPriceX96After == quote.sqrtPriceLimitX96) {\\n                            if (liquidityDelta > bestLiquidityDelta) {\\n                                bestLiquidityDelta = liquidityDelta;\\n                                bestSwapIn = quote.amountToPay;\\n                                bestSwapOut = quote.amountReceived;\\n                                bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n                            }\\n                            break;\\n                        }\\n                        /// @dev We should use more token1 in the swap to have more token0.\\n                        low = mid + 1;\\n                    }\\n                } else if (liquidity0 > liquidity1) {\\n                    liquidityDelta = liquidity1;\\n\\n                    /// @dev token1 is the limiting factor. We should have more token1\\n                    /// after the swap to increase the liquidity more.\\n                    if (zeroForOne) {\\n                        /// @dev token1 is tokenOut.\\n                        if (quote.sqrtPriceX96After == quote.sqrtPriceLimitX96) {\\n                            if (liquidityDelta > bestLiquidityDelta) {\\n                                bestLiquidityDelta = liquidityDelta;\\n                                bestSwapIn = quote.amountToPay;\\n                                bestSwapOut = quote.amountReceived;\\n                                bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n                            }\\n                            break;\\n                        }\\n                        /// @dev We should use more token0 in the swap to have more token1.\\n                        low = mid + 1;\\n                    } else {\\n                        /// @dev We should use less token1 in the swap.\\n                        high = mid;\\n                    }\\n                } else {\\n                    // liquidity0 == liquidity1\\n                    /// @dev The swap is optimal.\\n                    liquidityDelta = liquidity0;\\n\\n                    if (liquidityDelta > bestLiquidityDelta) {\\n                        bestLiquidityDelta = liquidityDelta;\\n                        bestSwapIn = quote.amountToPay;\\n                        bestSwapOut = quote.amountReceived;\\n                        bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n                    }\\n                    break;\\n                }\\n            } else {\\n                // quote.sqrtPriceX96After >= params.sqrtRatioUpperX96\\n                liquidityDelta = LiquidityAmounts.getLiquidityForAmount1(\\n                    params.sqrtRatioLowerX96,\\n                    params.sqrtRatioUpperX96,\\n                    amount1\\n                );\\n\\n                if (zeroForOne) {\\n                    /// @dev Only tokenOut (token1) is added to the position.\\n                    /// We should use more tokenIn (token0) in the swap to get more tokenOut.\\n                    /// zeroForOne purchase: sqrtPriceLimitX96 <= sqrtPriceX96After.\\n                    /// When using more token0 in the swap, the price goes down to the limit.\\n                    /// If we reach the limit, when putting more token0, we still get the same amount of token1.\\n                    if (quote.sqrtPriceX96After == quote.sqrtPriceLimitX96) {\\n                        if (liquidityDelta > bestLiquidityDelta) {\\n                            bestLiquidityDelta = liquidityDelta;\\n                            bestSwapIn = quote.amountToPay;\\n                            bestSwapOut = quote.amountReceived;\\n                            bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n                        }\\n                        break;\\n                    }\\n                    low = mid + 1;\\n                } else {\\n                    /// @dev All remaining tokenIn (token1) after the swap is added to the position,\\n                    /// while the tokenOut is not added to the pool. We should use less token1 in the swap,\\n                    /// so that more token1 can be added to the position.\\n                    /// oneForZero purchase: sqrtPriceX96After <= sqrtPriceLimitX96.\\n                    /// When using less token1 in the swap, the price goes down so the limit is not reached.\\n                    high = mid;\\n                }\\n            }\\n\\n            if (liquidityDelta > bestLiquidityDelta) {\\n                bestLiquidityDelta = liquidityDelta;\\n                bestSwapIn = quote.amountToPay;\\n                bestSwapOut = quote.amountReceived;\\n                bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n            }\\n        }\\n\\n        if (low == high) {\\n            ISwapHelper.Quote memory quote = swapHelper.quoteSlippageExactInputSingle(\\n                ISwapHelper.QuoteSlippageExactInputSingleParams({\\n                    tokenIn: tokenIn,\\n                    tokenOut: tokenOut,\\n                    fee: params.fee,\\n                    amountIn: low,\\n                    sqrtPriceX96: currentSqrtPriceX96,\\n                    liquidity: currentLiquidity,\\n                    maximumSlippagePercentage: params.maximumSlippagePercentage\\n                })\\n            );\\n            uint256 amount0 = zeroForOne ? params.amountIn - quote.amountToPay : quote.amountReceived;\\n            uint256 amount1 = zeroForOne ? quote.amountReceived : params.amountIn - quote.amountToPay;\\n            uint128 liquidity = LiquidityAmounts.getLiquidityForAmounts(\\n                quote.sqrtPriceX96After,\\n                params.sqrtRatioLowerX96,\\n                params.sqrtRatioUpperX96,\\n                amount0,\\n                amount1\\n            );\\n            if (liquidity > bestLiquidityDelta) {\\n                bestLiquidityDelta = liquidity;\\n                bestSwapIn = quote.amountToPay;\\n                bestSwapOut = quote.amountReceived;\\n                bestSqrtPriceX96After = quote.sqrtPriceX96After;\\n            }\\n        }\\n\\n        (bestAmount0Used, bestAmount1Used) = getAmountsDelta(\\n            bestSqrtPriceX96After,\\n            params.sqrtRatioLowerX96,\\n            params.sqrtRatioUpperX96,\\n            bestLiquidityDelta\\n        );\\n\\n        res.liquidityDelta = bestLiquidityDelta;\\n        res.sqrtPriceX96After = bestSqrtPriceX96After;\\n        res.amountSwapIn = bestSwapIn;\\n        res.spareIn = zeroForOne\\n            ? params.amountIn - bestSwapIn - bestAmount0Used\\n            : params.amountIn - bestSwapIn - bestAmount1Used;\\n        res.spareOut = zeroForOne ? bestSwapOut - bestAmount1Used : bestSwapOut - bestAmount0Used;\\n    }\\n\\n    function lpSwap(\\n        LpSwapParams memory params\\n    ) internal returns (uint128 liquidityDelta, uint256 spareIn, uint256 spareOut) {\\n        require(params.amountIn > 0, DLPRewardSwap__ZeroAmount());\\n        if (params.tokenIn == VANA) {\\n            require(msg.value >= params.amountIn, DLPRewardSwap__InsufficientAmount(VANA, params.amountIn, msg.value));\\n        }\\n\\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(params.lpTokenId);\\n        uint160 sqrtRatioLowerX96 = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint160 sqrtRatioUpperX96 = TickMath.getSqrtRatioAtTick(tickUpper);\\n\\n        LpSwapQuote memory quote = quoteLpSwap(\\n            QuoteLpSwapParams({\\n                amountIn: params.amountIn,\\n                tokenIn: params.tokenIn,\\n                tokenOut: params.tokenOut,\\n                fee: params.fee,\\n                maximumSlippagePercentage: params.maximumSlippagePercentage,\\n                sqrtRatioLowerX96: sqrtRatioLowerX96,\\n                sqrtRatioUpperX96: sqrtRatioUpperX96\\n            })\\n        );\\n        require(quote.liquidityDelta > 0, DLPRewardSwap__ZeroLiquidity());\\n\\n        uint256 amountSwapInUsed;\\n        uint256 amountSwapOut;\\n\\n        if (quote.amountSwapIn > 0) {\\n            (amountSwapInUsed, amountSwapOut) = swapHelper.slippageExactInputSingle{value: quote.amountSwapIn}(\\n                ISwapHelper.SlippageSwapParams({\\n                    tokenIn: params.tokenIn,\\n                    tokenOut: params.tokenOut,\\n                    fee: params.fee,\\n                    recipient: address(this),\\n                    amountIn: quote.amountSwapIn,\\n                    maximumSlippagePercentage: params.maximumSlippagePercentage\\n                })\\n            );\\n        }\\n        require(amountSwapInUsed == quote.amountSwapIn, DLPRewardSwap__LPAmountMismatch());\\n\\n        IWVANA WVANA = swapHelper.WVANA();\\n        address tokenIn = params.tokenIn == VANA ? address(WVANA) : params.tokenIn;\\n        address tokenOut = params.tokenOut == VANA ? address(WVANA) : params.tokenOut;\\n        bool zeroForOne = tokenIn < tokenOut;\\n\\n        uint256 amountLpIn = params.amountIn - amountSwapInUsed;\\n        if (params.tokenIn == VANA) {\\n            WVANA.deposit{value: amountLpIn}();\\n        }\\n\\n        address token0 = zeroForOne ? tokenIn : tokenOut;\\n        address token1 = zeroForOne ? tokenOut : tokenIn;\\n\\n        uint256 amount0Desired = zeroForOne ? amountLpIn : amountSwapOut;\\n        uint256 amount1Desired = zeroForOne ? amountSwapOut : amountLpIn;\\n\\n        uint256 token0Balance = IERC20(token0).balanceOf(address(this));\\n        uint256 token1Balance = IERC20(token1).balanceOf(address(this));\\n        require(\\n            token0Balance >= amount0Desired,\\n            DLPRewardSwap__InsufficientAmount(token0, amount0Desired, token0Balance)\\n        );\\n        require(\\n            token1Balance >= amount1Desired,\\n            DLPRewardSwap__InsufficientAmount(token1, amount1Desired, token1Balance)\\n        );\\n\\n        IERC20(token0).approve(address(positionManager), amount0Desired);\\n        IERC20(token1).approve(address(positionManager), amount1Desired);\\n\\n        IUniswapV3Pool pool = swapHelper.getPool(tokenIn, tokenOut, params.fee);\\n        (uint160 currentSqrtPriceX96, , , , , , ) = pool.slot0();\\n        uint128 liquidityDeltaDesired = LiquidityAmounts.getLiquidityForAmounts(\\n            currentSqrtPriceX96,\\n            sqrtRatioLowerX96,\\n            sqrtRatioUpperX96,\\n            amount0Desired,\\n            amount1Desired\\n        );\\n        require(\\n            liquidityDeltaDesired == quote.liquidityDelta,\\n            DLPRewardSwap__LiquidityMismatch(quote.liquidityDelta, liquidityDeltaDesired)\\n        );\\n\\n        uint256 amount0;\\n        uint256 amount1;\\n        (liquidityDelta, amount0, amount1) = positionManager.increaseLiquidity(\\n            INonfungiblePositionManager.IncreaseLiquidityParams({\\n                tokenId: params.lpTokenId,\\n                amount0Desired: amount0Desired,\\n                amount1Desired: amount1Desired,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp\\n            })\\n        );\\n\\n        spareIn = zeroForOne ? amount0Desired - amount0 : amount1Desired - amount1;\\n        spareOut = zeroForOne ? amount1Desired - amount1 : amount0Desired - amount0;\\n\\n        /// @dev Check invariants\\n        require(\\n            liquidityDelta == quote.liquidityDelta,\\n            DLPRewardSwap__LiquidityMismatch(quote.liquidityDelta, liquidityDelta)\\n        );\\n        require(spareIn == quote.spareIn, DLPRewardSwap__SpareAmountMismatch(params.tokenIn, quote.spareIn, spareIn));\\n        require(\\n            spareOut == quote.spareOut,\\n            DLPRewardSwap__SpareAmountMismatch(params.tokenOut, quote.spareOut, spareOut)\\n        );\\n\\n        if (params.tokenIn == VANA && spareIn > 0) {\\n            WVANA.withdraw(spareIn);\\n        }\\n    }\\n\\n    function splitRewardSwap(\\n        SplitRewardSwapParams calldata params\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        returns (uint256 tokenRewardAmount, uint256 spareToken, uint256 spareVana, uint256 usedVanaAmount)\\n    {\\n        uint256 amountIn = msg.value;\\n        require(amountIn > 0, DLPRewardSwap__ZeroAmount());\\n        require(params.rewardPercentage <= ONE_HUNDRED_PERCENT, DLPRewardSwap__InvalidRewardPercentage());\\n        require(params.maximumSlippagePercentage <= ONE_HUNDRED_PERCENT, DLPRewardSwap__InvalidSlippagePercentage());\\n        require(params.rewardRecipient != address(0), DLPRewardSwap__ZeroAddress());\\n        require(params.spareRecipient != address(0), DLPRewardSwap__ZeroAddress());\\n\\n        (, , address token0, address token1, uint24 fee, , , , , , , ) = positionManager.positions(params.lpTokenId);\\n        IWVANA WVANA = swapHelper.WVANA();\\n        require(token0 == address(WVANA) || token1 == address(WVANA), DLPRewardSwap__InvalidLpTokenId());\\n        address dlpToken = token0 == address(WVANA) ? token1 : token0;\\n\\n        uint256 rewardAmount = (amountIn * params.rewardPercentage) / ONE_HUNDRED_PERCENT;\\n        require(rewardAmount > 0, DLPRewardSwap__ZeroAmount());\\n\\n        uint256 lpAmount = amountIn - rewardAmount;\\n\\n        /// @dev Use VANA to increase liquidity\\n\\n        uint128 liquidityDelta;\\n        (liquidityDelta, spareVana, spareToken) = lpSwap(\\n            LpSwapParams({\\n                amountIn: lpAmount,\\n                tokenIn: VANA,\\n                tokenOut: dlpToken,\\n                fee: fee,\\n                maximumSlippagePercentage: params.maximumSlippagePercentage,\\n                lpTokenId: params.lpTokenId\\n            })\\n        );\\n        uint256 usedVanaAmountForLp = lpAmount - spareVana;\\n\\n        /// @dev Send spare tokens to the recipient\\n        if (spareVana > 0) {\\n            payable(params.spareRecipient).sendValue(spareVana);\\n        }\\n        if (spareToken > 0) {\\n            IERC20(dlpToken).safeTransfer(params.spareRecipient, spareToken);\\n        }\\n\\n        /// @dev Swap VANA reward to dlpToken\\n        uint256 usedVanaAmountForReward;\\n        (usedVanaAmountForReward, tokenRewardAmount) = swapHelper.slippageExactInputSingle{value: rewardAmount}(\\n            ISwapHelper.SlippageSwapParams({\\n                tokenIn: VANA,\\n                tokenOut: dlpToken,\\n                fee: fee,\\n                recipient: params.rewardRecipient,\\n                amountIn: rewardAmount,\\n                maximumSlippagePercentage: params.maximumSlippagePercentage\\n            })\\n        );\\n        uint256 unusedVanaAmountForReward = rewardAmount - usedVanaAmountForReward;\\n        if (unusedVanaAmountForReward > 0) payable(msg.sender).sendValue(unusedVanaAmountForReward);\\n\\n        usedVanaAmount = usedVanaAmountForLp + usedVanaAmountForReward;\\n        require(\\n            amountIn == usedVanaAmount + spareVana + unusedVanaAmountForReward,\\n            DLPRewardSwap__AmountMismatch(amountIn, usedVanaAmount, spareVana, unusedVanaAmountForReward)\\n        );\\n\\n        emit Reward(\\n            msg.sender,\\n            params.rewardRecipient,\\n            dlpToken,\\n            usedVanaAmountForReward,\\n            tokenRewardAmount,\\n            usedVanaAmountForLp,\\n            liquidityDelta,\\n            spareVana,\\n            spareToken\\n        );\\n    }\\n\\n    function quoteSplitRewardSwap(\\n        QuoteSplitRewardSwapParams calldata params\\n    )\\n        external\\n        override\\n        returns (uint256 tokenRewardAmount, uint256 spareToken, uint256 spareVana, uint256 usedVanaAmount)\\n    {\\n        require(params.amountIn > 0, DLPRewardSwap__ZeroAmount());\\n        require(params.rewardPercentage <= ONE_HUNDRED_PERCENT, DLPRewardSwap__InvalidRewardPercentage());\\n        require(params.maximumSlippagePercentage <= ONE_HUNDRED_PERCENT, DLPRewardSwap__InvalidSlippagePercentage());\\n\\n        (, , address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, , , , , ) = positionManager\\n            .positions(params.lpTokenId);\\n        uint160 sqrtRatioLowerX96 = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint160 sqrtRatioUpperX96 = TickMath.getSqrtRatioAtTick(tickUpper);\\n\\n        IWVANA WVANA = swapHelper.WVANA();\\n        require(token0 == address(WVANA) || token1 == address(WVANA), DLPRewardSwap__InvalidLpTokenId());\\n        address dlpToken = token0 == address(WVANA) ? token1 : token0;\\n\\n        uint256 rewardAmount = (params.amountIn * params.rewardPercentage) / ONE_HUNDRED_PERCENT;\\n        require(rewardAmount > 0, DLPRewardSwap__ZeroAmount());\\n\\n        uint256 lpAmount = params.amountIn - rewardAmount;\\n\\n        /// @dev Use VANA to increase liquidity\\n        LpSwapQuote memory lpSwapQuote = quoteLpSwap(\\n            QuoteLpSwapParams({\\n                amountIn: lpAmount,\\n                tokenIn: VANA,\\n                tokenOut: dlpToken,\\n                fee: fee,\\n                maximumSlippagePercentage: params.maximumSlippagePercentage,\\n                sqrtRatioLowerX96: sqrtRatioLowerX96,\\n                sqrtRatioUpperX96: sqrtRatioUpperX96\\n            })\\n        );\\n\\n        /// @dev Swap VANA reward to dlpToken\\n        IUniswapV3Pool pool = swapHelper.getPool(VANA, dlpToken, fee);\\n        ISwapHelper.Quote memory rewardSwapQuote = swapHelper.quoteSlippageExactInputSingle(\\n            ISwapHelper.QuoteSlippageExactInputSingleParams({\\n                tokenIn: VANA,\\n                tokenOut: dlpToken,\\n                fee: fee,\\n                amountIn: rewardAmount,\\n                sqrtPriceX96: lpSwapQuote.sqrtPriceX96After,\\n                liquidity: pool.liquidity() + lpSwapQuote.liquidityDelta,\\n                maximumSlippagePercentage: params.maximumSlippagePercentage\\n            })\\n        );\\n\\n        tokenRewardAmount = rewardSwapQuote.amountReceived;\\n        spareToken = lpSwapQuote.spareOut;\\n        spareVana = lpSwapQuote.spareIn;\\n        usedVanaAmount = lpAmount - lpSwapQuote.spareIn + rewardSwapQuote.amountToPay;\\n    }\\n}\\n\",\"keccak256\":\"0xa62f923891199e804093bc62913c8443d22cb6115de9b1913201945bfebe65ac\",\"license\":\"MIT\"},\"contracts/dlpRewardSwap/interfaces/DLPRewardSwapStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"./IDLPRewardSwap.sol\\\";\\n\\n/**\\n * @title Storage for DLPRewardSwap\\n * @notice For future upgrades, do not change DLPRewardSwapStorageV1. \\n * Create a new contract which implements DLPRewardSwapStorageV1.\\n */\\nabstract contract DLPRewardSwapStorageV1 is IDLPRewardSwap {\\n    ISwapHelper public override swapHelper;\\n    INonfungiblePositionManager public override positionManager;\\n}\",\"keccak256\":\"0x212f26d155fcfc610e16409bd51466678b53ad669c1bedcb3f61d040456dcf70\",\"license\":\"MIT\"},\"contracts/dlpRewardSwap/interfaces/IDLPRewardSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n// import \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./INonfungiblePositionManager.sol\\\";\\nimport \\\"../../swapHelper/interfaces/ISwapHelper.sol\\\";\\n\\ninterface IDLPRewardSwap {\\n    event Reward(\\n        address indexed sender,\\n        address indexed recipient,\\n        address indexed token,\\n        uint256 usedVanaForReward,\\n        uint256 tokenRewardAmount,\\n        uint256 usedVanaForLp,\\n        uint256 liquidityDelta,\\n        uint256 spareVana,\\n        uint256 spareToken\\n    );\\n\\n    error DLPRewardSwap__ZeroAddress();\\n    error DLPRewardSwap__ZeroAmount();\\n    error DLPRewardSwap__ZeroAmountSwapIn();\\n    error DLPRewardSwap__ZeroLiquidity();\\n    error DLPRewardSwap__InsufficientAmount(address token, uint256 expected, uint256 actual);\\n    error DLPRewardSwap__InvalidRange();\\n    error DLPRewardSwap__LPAmountMismatch();\\n    error DLPRewardSwap__SpareAmountMismatch(address token, uint256 expected, uint256 actual);\\n    error DLPRewardSwap__LiquidityMismatch(uint128 expected, uint128 actual);\\n    error DLPRewardSwap__VanaInMismatch(uint256 expected, uint256 actual);\\n    error DLPRewardSwap__AmountMismatch(uint256 amountIn, uint256 used, uint256 spareVana, uint256 unusedVana);\\n    error DLPRewardSwap__InvalidSlippagePercentage();\\n    error DLPRewardSwap__InvalidRewardPercentage();\\n    error DLPRewardSwap__InvalidLpTokenId();\\n\\n    /// @notice Returns the current version of the contract\\n    /// @return The version of the contract\\n    function version() external view returns (uint256);\\n\\n    /// @notice Pauses the contract\\n    function pause() external;\\n\\n    /// @notice Unpauses the contract\\n    function unpause() external;\\n\\n    /// @notice Returns the address of the swap helper contract\\n    /// @return The address of the swap helper contract\\n    function swapHelper() external view returns (ISwapHelper);\\n\\n    /// @notice Updates the address of the swap helper contract\\n    /// @param newSwapHelper The address of the new swap helper contract\\n    function updateSwapHelper(ISwapHelper newSwapHelper) external;\\n\\n    /// @notice Returns the address of the Uniswap position manager contract\\n    /// @return The address of the Uniswap position manager contract\\n    function positionManager() external view returns (INonfungiblePositionManager);\\n\\n    /// @notice Updates the address of the Uniswap position manager contract\\n    /// @param newPositionManager The address of the new Uniswap position manager contract\\n    function updatePositionManager(INonfungiblePositionManager newPositionManager) external;\\n\\n    struct QuoteLpSwapParams {\\n        uint256 amountIn;\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        uint256 maximumSlippagePercentage;\\n        uint160 sqrtRatioLowerX96;\\n        uint160 sqrtRatioUpperX96;\\n    }\\n\\n    struct LpSwapQuote {\\n        uint256 amountSwapIn;\\n        uint256 spareIn;\\n        uint256 spareOut;\\n        uint128 liquidityDelta;\\n        uint160 sqrtPriceX96After;\\n    }\\n\\n    struct LpSwapParams {\\n        uint256 amountIn;\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        uint256 maximumSlippagePercentage;\\n        uint256 lpTokenId;\\n    }\\n\\n    struct SplitRewardSwapParams {\\n        uint256 lpTokenId;\\n        uint256 rewardPercentage;\\n        uint256 maximumSlippagePercentage;\\n        address rewardRecipient;\\n        address spareRecipient;\\n    }\\n\\n    function splitRewardSwap(\\n        SplitRewardSwapParams calldata params\\n    )\\n        external\\n        payable\\n        returns (uint256 tokenRewardAmount, uint256 spareToken, uint256 spareVana, uint256 usedVanaAmount);\\n\\n    struct QuoteSplitRewardSwapParams {\\n        uint256 amountIn;\\n        uint256 lpTokenId;\\n        uint256 rewardPercentage;\\n        uint256 maximumSlippagePercentage;\\n    }\\n\\n    function quoteSplitRewardSwap(\\n        QuoteSplitRewardSwapParams calldata params\\n    ) external returns (uint256 tokenRewardAmount, uint256 spareToken, uint256 spareVana, uint256 usedVanaAmount);\\n}\\n\",\"keccak256\":\"0xce866be65e92e9dc8ee5a4c2ae568bd2eda1c87d46e32a3ef544af0f89f5f053\",\"license\":\"MIT\"},\"contracts/dlpRewardSwap/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\n\\n// import './IPoolInitializer.sol';\\n// import './IERC721Permit.sol';\\n// import './IPeripheryPayments.sol';\\n// import './IPeripheryImmutableState.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xc2e9c2052b89813cebefb57762a74190d06a6eca7403cb3cd542b86997204574\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swapHelper/interfaces/ISwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"./IWVANA.sol\\\";\\n\\ninterface ISwapHelper {\\n    error SwapHelper__InvalidAmountIn();\\n    error SwapHelper__InvalidSlippagePercentage();\\n    error SwapHelper__ZeroAddress();\\n    error Uniswap__AS();\\n    error Uniswap__SPL();\\n    \\n    function version() external view returns (uint256);\\n\\n    function WVANA() external view returns (IWVANA);\\n\\n    function uniswapV3Router() external view returns (address);\\n\\n    function uniswapV3Quoter() external view returns (IQuoterV2);\\n\\n    function updateUniswapV3Router(address newUniswapV3Router) external;\\n\\n    function updateUniswapV3Quoter(IQuoterV2 newUniswapV3Quoter) external;\\n\\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (IUniswapV3Pool pool);\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of `tokenIn` for as much as possible of `tokenOut`. Similar to Uniswap V3's `exactInputSingle`.\\n    /// @param params The parameters for the swap.\\n    /// @return amountOut The amount of tokenOut received from the swap.\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        uint256 amountIn;\\n    }\\n\\n    /// @notice Returns the `amountOut` received for a given exact `amountIn` for a swap of a single pool.\\n    /// @param params The parameters for the quote.\\n    /// @return amountOut The amount of tokenOut received from the swap.\\n    function quoteExactInputSingle(QuoteExactInputSingleParams calldata params) external returns (uint256 amountOut);\\n\\n    struct SlippageSwapParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 maximumSlippagePercentage;\\n    }\\n\\n    /// @notice Swaps as much as possible of `amountIn` while maintaining a maximum price slippage.\\n    /// @param params The parameters for the swap.\\n    /// @return amountInUsed The amount of tokenIn used for the swap.\\n    /// @return amountOut The amount of tokenOut received from the swap.\\n    function slippageExactInputSingle(\\n        SlippageSwapParams calldata params\\n    ) external payable returns (uint256 amountInUsed, uint256 amountOut);\\n\\n    struct QuoteSlippageExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        uint256 amountIn;\\n        uint160 sqrtPriceX96;\\n        uint128 liquidity;\\n        uint256 maximumSlippagePercentage;\\n    }\\n\\n    struct Quote {\\n        int256 amount0Delta;\\n        int256 amount1Delta;\\n        uint256 amountToPay;\\n        uint256 amountReceived;\\n        uint160 sqrtPriceX96After;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the as much as possible `amountInUsed` and `amountOut` while maintaining a maximum price slippage.\\n    /// @param params The parameters for the quote.\\n    /// @return quote The quote object containing the amounts and price after the swap.\\n    function quoteSlippageExactInputSingle(\\n        QuoteSlippageExactInputSingleParams calldata params\\n    ) external returns (Quote memory quote);\\n}\\n\",\"keccak256\":\"0xc223acc469aa7699f540273fda136f8f1c9f199f06c5f08474a61c6d716ccb6e\",\"license\":\"MIT\"},\"contracts/swapHelper/interfaces/IWVANA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWVANA is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\",\"keccak256\":\"0x6f5ea878682c4b66ca8e2a273ca4f54d7ee504e80a5f7e51bbba41001aaa33d2\",\"license\":\"MIT\"},\"contracts/swapHelper/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xeb966aa0ba2cca10735d95172c76393bb9237a70464d2331170e6a45bb5e1903\",\"license\":\"MIT\"},\"contracts/swapHelper/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        unchecked {\\n            return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n        }\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        unchecked {\\n            return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n        }\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                FullMath.mulDiv(\\n                    uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    sqrtRatioBX96\\n                ) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        unchecked {\\n            return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\",\"keccak256\":\"0x7286db800bc8e38695a3ddc3a98b77d15aae6064ee5db202439fbd7f775b3620\",\"license\":\"GPL-2.0-or-later\"},\"contracts/swapHelper/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\\\";\\n\\nimport {FullMath} from \\\"./FullMath.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            unchecked {\\n                uint256 product;\\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                    uint256 denominator = numerator1 + product;\\n                    if (denominator >= numerator1)\\n                        // always fits in 160 bits\\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n                }\\n            }\\n            // denominator is checked for overflow\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96) + amount));\\n        } else {\\n            unchecked {\\n                uint256 product;\\n                // if the product overflows, we know the denominator underflows\\n                // in addition, we must check that the denominator does not underflow\\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n                uint256 denominator = numerator1 - product;\\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return (uint256(sqrtPX96) + quotient).toUint160();\\n        } else {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            unchecked {\\n                return uint160(sqrtPX96 - quotient);\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n            require(sqrtRatioAX96 > 0);\\n\\n            return\\n                roundUp\\n                    ? UnsafeMath.divRoundingUp(\\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                        sqrtRatioAX96\\n                    )\\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                roundUp\\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88238258449848b779cd38a3348315c53635eb2f4b7bad976d1f8d2df982df98\",\"license\":\"BUSL-1.1\"},\"contracts/swapHelper/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\",\"keccak256\":\"0x2adb8fb790220ae9096d222f6e97b2ae88648f6cbcda56f7564dd835ca2cbb1f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100ea57306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460ff8160401c166100d9576002600160401b03196001600160401b03821601610073575b6040516138f890816100f08239608051818181610b0b0152610bdb0152f35b6001600160401b0319166001600160401b039081177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a13880610054565b63f92ee8a960e01b60005260046000fd5b600080fdfe61016080604052600436101561001e575b50361561001c57600080fd5b005b600090813560e01c90816301ffc9a714611e12575080630fc6a11c14611deb578063248a9ca314611dc457806325656a6314610f005780632f2ff15d14610ece57806336568abe14610e895780633f2b972314610e465780633f4ba83a14610dc457806344fd3939146109325780634f1ef28614610b6057806352d1902d14610af857806354fd4d5014610adc5780635c975abb14610aac5780636881d8cb14610a55578063791b98bc14610a2c5780638456cb59146109a757806391d148541461094e578063a217fddf14610932578063ad3cb1cc146108b8578063aeb4ad551461043e578063c0c53b8b146101b9578063d547741f1461017e578063dd0081c71461015a5763f874225403610010573461015757806003193601126101575760206040516000805160206138a38339815191528152f35b80fd5b5034610157578060031936011261015757602060405168056bc75e2d631000008152f35b5034610157576040366003190112610157576101b560043561019e611e83565b906101b06101ab82611f54565b61242a565b61260d565b5080f35b5034610157576060366003190112610157576101d3611e99565b906101dc611e83565b6044356001600160a01b038116939084900361043a576000805160206138838339815191525493604085901c60ff1615926001600160401b03861680159081610432575b6001149081610428575b15908161041f575b50610410576001600160401b03198616600117600080516020613883833981519152559394929361038a93856103e7575b5061026c6135bc565b6102746135bc565b61027c6135bc565b6102846135bc565b60ff196000805160206138438339815191525416600080516020613843833981519152556102b06135bc565b6102b86135bc565b60016000805160206138638339815191525560018060a01b031660018060a01b031986541617855560018060a01b031960015416176001556000805160206138a383398151915284526000805160206138238339815191526020528360016040822001546000805160206138a383398151915282526000805160206138238339815191526020528160016040822001556000805160206138a38339815191527fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff8380a461038481612474565b506124f0565b506103925780f35b60ff60401b196000805160206138838339815191525416600080516020613883833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6001600160481b0319166001600160401b01176000805160206138838339815191525538610263565b63f92ee8a960e01b8552600485fd5b90501538610232565b303b15915061022a565b859150610220565b8280fd5b5034610157576080366003190112610157576004359081156108a95760443568056bc75e2d63100000811161089a576064359268056bc75e2d63100000841161088b5760015460405163133f757160e31b8152602480356004830152909161018091839182906001600160a01b03165afa94851561088057849385869387908899610831575b506104d16104d7916126ad565b986126ad565b87546040516377bd66b560e01b815291979190602090829060049082906001600160a01b03165afa908115610792578991610812575b506001600160a01b03828116911690811490819081156107ff575b50156107f0579161054e9168056bc75e2d63100000936000146107e85750925b866120a1565b049384156107d95790610564856105b7936120ca565b9562ffffff6040519261057684611ee0565b888452602084018a90526001600160a01b039081166040850181905296909116606084018190526080840186905299811660a08401521660c0820152612a32565b9560018060a01b038654169360405190630b4c774160e11b8252876004830152846024830152826044830152602082606481895afa9182156107ce57889261079d575b506080890151604051630d34328160e11b81526001600160a01b0391821693909160209183916004918391165afa908115610792578991610754575b5060608a01516001600160801b039182169082160193908411610740579260c095926106b195928a98956040519561066d87611ee0565b8a8752602087015260408601526060850152608084015260018060801b031660a083015284820152604051948580948193636240e8c760e01b8352600483016121d2565b03925af192831561073457926106ff575b506106fb906106ee60608401519360406106e560208289015198015180956120ca565b91015190612141565b9060405194859485611e67565b0390f35b6106fb9192506107269060c03d60c01161072d575b61071e8183611f16565b810190612174565b91906106c2565b503d610714565b604051903d90823e3d90fd5b634e487b7160e01b89526011600452602489fd5b90506020813d60201161078a575b8161076f60209383611f16565b810103126107865761078090611fc3565b38610636565b8880fd5b3d9150610762565b6040513d8b823e3d90fd5b6107c091925060203d6020116107c7575b6107b88183611f16565b810190612082565b90386105fa565b503d6107ae565b6040513d8a823e3d90fd5b630cdbe5ed60e11b8752600487fd5b905092610548565b630b9b5c2560e21b8952600489fd5b6001600160a01b03851614905038610528565b61082b915060203d6020116107c7576107b88183611f16565b3861050d565b9150506108619197506104d195506104d793506101803d8111610879575b6108598183611f16565b810190611fd7565b50505050509b955096929093509790929591506104c4565b503d61084f565b6040513d86823e3d90fd5b63fc46777360e01b8352600483fd5b633de9f84960e01b8252600482fd5b630cdbe5ed60e11b8152600490fd5b503461015757806003193601126101575760408051916108d88284611f16565b60058352640352e302e360dc1b6020840152815192839160208352815191826020850152815b83811061091b575050828201840152601f01601f19168101030190f35b6020828201810151888301880152879550016108fe565b5034610157578060031936011261015757602090604051908152f35b503461015757604036600319011261015757604061096a611e83565b916004358152600080516020613823833981519152602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b50346101575780600319360112610157576109c06123dc565b6000805160206138438339815191525460ff8116610a1d5760019060ff191617600080516020613843833981519152557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b63d93c066560e01b8252600482fd5b50346101575780600319360112610157576001546040516001600160a01b039091168152602090f35b503461015757602036600319011261015757610a6f611e99565b610a776123dc565b6001600160a01b03168015610a9d57600180546001600160a01b03191691909117905580f35b6343b70e1d60e11b8252600482fd5b5034610157578060031936011261015757602060ff60008051602061384383398151915254166040519015158152f35b5034610157578060031936011261015757602060405160018152f35b50346101575780600319360112610157577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610b515760206040516000805160206138038339815191528152f35b63703e46dd60e11b8152600490fd5b50604036600319011261015757610b75611e99565b602435906001600160401b03821161043a573660238301121561043a5781600401359083610ba283611f39565b93610bb06040519586611f16565b8385526020850193366024828401011161043a57806024602093018637850101526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016308114908115610da1575b50610d925783805260008051602061382383398151915260209081526040808620336000908152925290205460ff1615610d7a576040516352d1902d60e01b81526001600160a01b0382169390602081600481885afa869181610d42575b50610c7d57634c9c8ce360e01b86526004859052602486fd5b9384600080516020613803833981519152879603610d305750823b15610d1e5760008051602061380383398151915280546001600160a01b031916821790558491907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2805115610d03576101b59382915190845af4610cfd61235b565b91613752565b5050505034610d0f5780f35b63b398979f60e01b8152600490fd5b634c9c8ce360e01b8552600452602484fd5b632a87526960e21b8652600452602485fd5b9091506020813d602011610d72575b81610d5e60209383611f16565b81010312610d6e57519038610c64565b8680fd5b3d9150610d51565b63e2517d3f60e01b8452336004526024849052604484fd5b63703e46dd60e11b8452600484fd5b600080516020613803833981519152546001600160a01b03161415905038610c06565b5034610157578060031936011261015757610ddd6123dc565b6000805160206138438339815191525460ff811615610e375760ff1916600080516020613843833981519152557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b638dfc202b60e01b8252600482fd5b503461015757602036600319011261015757610e60611e99565b610e686123dc565b6001600160a01b03168015610a9d5781546001600160a01b03191617815580f35b503461015757604036600319011261015757610ea3611e83565b336001600160a01b03821603610ebf576101b59060043561260d565b63334bd91960e11b8252600482fd5b5034610157576040366003190112610157576101b5600435610eee611e83565b90610efb6101ab82611f54565b612576565b5060a03660031901126101575760026000805160206138638339815191525414611db55760026000805160206138638339815191525534156108a9576024359068056bc75e2d631000008211611da65768056bc75e2d6310000060443511611d97576001600160a01b03610f72611f75565b1615611d88576001600160a01b03610f88611f8b565b1615611d885760018060a01b0360015416906004356040519163133f757160e31b835281600484015261018083602481875afa9283156117d5578182918395611d56575b5082546040516377bd66b560e01b815290602090829060049082906001600160a01b03165afa908115610880578491611d37575b506001600160a01b0382811691169081149081908115611d24575b5015611d1557916110419168056bc75e2d6310000093600014611d0d5750965b346120a1565b046101005261010051156108a95761105c61010051346120ca565b6040519461106986611eaf565b81865282602087015260018060a01b038716604087015262ffffff851660608701526080860193604435855260a08701528115611cfe5760208601516001600160a01b031615611cd4575b61018060a087015160246040518094819363133f757160e31b835260048301525afa90811561191b5783908492611c9e575b506110f36110f9916126ad565b916126ad565b90611166875160018060a01b0360208a01511660018060a01b0360408b01511662ffffff60608c015116908951926040519461113486611ee0565b855260208501526040840152606083015260808201526001600160a01b0383811660a0830152841660c0820152612a32565b610120819052606001516001600160801b031615611c8f578391849561012051519081611bcf575b505061012051518303611bc05784546040516377bd66b560e01b8152929190602090849060049082906001600160a01b03165afa928315611bb5578693611b94575b5060208901516001600160a01b031680611b8e57506001600160a01b038316965b60408a01516001600160a01b031680611b8457506001600160a01b0384169461121c905b8b516120ca565b60208b01519091906001600160a01b031615611b36575b6001600160a01b03868116908a161015611b2f5788905b6001600160a01b03878116908b161015611b285786925b6101408a90526001600160a01b03888116908c161015611b1e5780610140525b60c08a90526001600160a01b03888116908c161015611b15575060c0525b6040516370a0823160e01b81523060048201526020816024816001600160a01b0386165afa908115610792578991611ae3575b506040516370a0823160e01b8152306004820152906020826024816001600160a01b0388165afa918215611ad857908a9392918492611a98575b50916113396113699261132c602095610140518561014051831015612239565b60c0518781831015612239565b60015460405163095ea7b360e01b815261014051909586948593919284926001600160a01b031660048401612272565b03926001600160a01b03165af180156107ce5790889291611a50575b5060015460405163095ea7b360e01b815260c05190936020938593909284929183916113bd916001600160a01b031660048401612272565b03926001600160a01b03165af180156119ef57611a19575b50855460608a0151604051630b4c774160e11b81529160209183916001600160a01b031690829081906114129062ffffff168b8f6004850161214e565b03915afa9081156119ef576004929160e09189916119fa575b50604051633850c7bd831b815293849182906001600160a01b03165afa9182156119ef579161148c939161146f9389926119b8575b5060c05192610140519261339a565b61012051606001516001600160801b039081169082168114612301565b60018060a01b0360015416606060a060c4818b0151604051906114ae82611eaf565b815261014051602082015260c05160408201528884820152886080820152428382015288604051958694859363219f5d1760e01b855280516004860152602081015160248601526040810151604486015287810151606486015260808101516084860152015160a48401525af19081156119ad578560a0528560e0528591611959575b506001600160a01b0383811690871610156119455761155560e051610140516120ca565b9586935b6001600160a01b039081169116101561192f576115789060c0516120ca565b965b610120516060015160a05161159e916001600160801b039081169082168114612301565b6115bf83602061012051015160018060a01b0360208501511681831461232f565b6115e088604061012051015160018060a01b0360408501511681831461232f565b602001516001600160a01b03161580611926575b6118b9575b50611603916120ca565b928261189a575b846117e2575b8154611689949392916040916001600160a01b031661162d611f75565b62ffffff84519361163d85611eaf565b8685526001600160a01b038c8116602087015291168585015216606083015261010051608083015260443560a08301528251635ad08fe560e11b815296879283918291600483016120ed565b039161010051905af19384156117d55781946117a1575b506116ae81610100516120ca565b9283611792575b6116bf8282612141565b936116d3816116ce8688612141565b612141565b340361176e5750949593946106fb946001600160a01b036116f2611f75565b1691604051938452876020850152604084015260018060801b0360a0511660608401528360808401528760a084015260018060a01b0316917f3c5d8e2b4dedd285c347941d3f9f922359ba9821c0db27bbd73c8d2090191e4e60c03392a460016000805160206138638339815191525560405194859485611e67565b6040516318a91f2160e01b815290819061178e9086883460048601611e67565b0390fd5b61179c843361238b565b6116b5565b90506117c691935060403d6040116117ce575b6117be8183611f16565b8101906120d7565b9290386116a0565b503d6117b4565b50604051903d90823e3d90fd5b61184782806117ef611f8b565b604051611820816118128c602083019563a9059cbb60e01b875260248401612272565b03601f198101835282611f16565b5190826001600160a01b038c165af161183761235b565b906001600160a01b038916613752565b8051908115159182611877575b50501561161057635274afe760e01b82526001600160a01b038616600452602482fd5b819250906020918101031261043a5760206118929101612265565b153880611854565b6118b4836001600160a01b036118ae611f8b565b1661238b565b61160a565b6001600160a01b03169050803b1561043a57828091602460405180948193632e1a7d4d60e01b83528960048401525af1801561191b57849184916118fe575b506115f9565b8192509061190b91611f16565b611917578282386118f8565b5080fd5b6040513d85823e3d90fd5b508115156115f4565b5061193f60e051610140516120ca565b9661157a565b6119518160c0516120ca565b958693611559565b90506060813d6060116119a5575b8161197460609383611f16565b810103126119a15761198581611fc3565b6040602083015192015160805260a05260e05260805138611531565b8480fd5b3d9150611967565b6040513d87823e3d90fd5b6119db91925060e03d60e0116119e8575b6119d38183611f16565b81019061229c565b5050505050509038611460565b503d6119c9565b6040513d89823e3d90fd5b611a13915060203d6020116107c7576107b88183611f16565b3861142b565b6020813d602011611a48575b81611a3260209383611f16565b81010312610d6e57611a4390612265565b6113d5565b3d9150611a25565b9091506020813d602011611a90575b81611a6c60209383611f16565b81010312611a8c576113bd8892611a84602093612265565b509150611385565b8780fd5b3d9150611a5f565b92935090506020823d602011611ad0575b81611ab660209383611f16565b81010312611acb57905189929161133961130c565b600080fd5b3d9150611aa9565b6040513d8c823e3d90fd5b90506020813d602011611b0d575b81611afe60209383611f16565b81010312611acb5751386112d2565b3d9150611af1565b60c0525061129f565b8161014052611281565b8992611261565b859061124a565b6001600160a01b038516803b1561078657888391600460405180948193630d0e30db60e41b83525af1801561079257611b70575b50611233565b88611b7d91999299611f16565b9638611b6a565b61121c9095611215565b966111f1565b611bae91935060203d6020116107c7576107b88183611f16565b91386111d0565b6040513d88823e3d90fd5b630be69f0160e41b8552600485fd5b865460208b01516040808d015160608e015194518251969c509698509095611c4d956001600160a01b03948516959094919362ffffff9091169282169116611c1685611eaf565b845260208401528583015230606083015289608083015260a08201528351988980948193635ad08fe560e11b8352600483016120ed565b03925af180156108805784958591611c6a575b509491388061118e565b9050611c8691955060403d6040116117ce576117be8183611f16565b94909438611c60565b63439f137760e11b8452600484fd5b6110f392506110f99150611cc0906101803d8111610879576108598183611f16565b5050505050979550935050505091506110e6565b8551803410611ce357506110b4565b6349c05bd360e11b8452600484905260245234604452606483fd5b630cdbe5ed60e11b8352600483fd5b90509661103b565b630b9b5c2560e21b8452600484fd5b6001600160a01b0385161490503861101b565b611d50915060203d6020116107c7576107b88183611f16565b38611000565b915050611d739193506101803d8111610879576108598183611f16565b50505050505050925094925093909338610fcc565b6343b70e1d60e11b8152600490fd5b63fc46777360e01b8152600490fd5b633de9f84960e01b8152600490fd5b633ee5aeb560e01b8152600490fd5b5034610157576020366003190112610157576020611de3600435611f54565b604051908152f35b5034610157578060031936011261015757546040516001600160a01b039091168152602090f35b9050346119175760203660031901126119175760043563ffffffff60e01b811680910361043a5760209250637965db0b60e01b8114908115611e56575b5015158152f35b6301ffc9a760e01b14905038611e4f565b9094939260609260808301968352602083015260408201520152565b602435906001600160a01b0382168203611acb57565b600435906001600160a01b0382168203611acb57565b60c081019081106001600160401b03821117611eca57604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117611eca57604052565b60a081019081106001600160401b03821117611eca57604052565b601f909101601f19168101906001600160401b03821190821017611eca57604052565b6001600160401b038111611eca57601f01601f191660200190565b60005260008051602061382383398151915260205260016040600020015490565b6064356001600160a01b0381168103611acb5790565b6084356001600160a01b0381168103611acb5790565b51906001600160a01b0382168203611acb57565b51908160020b8203611acb57565b51906001600160801b0382168203611acb57565b919082610180910312611acb5781516001600160601b0381168103611acb579161200360208201611fa1565b9161201060408301611fa1565b9161201d60608201611fa1565b91608082015162ffffff81168103611acb579161203c60a08201611fb5565b9161204960c08301611fb5565b9161205660e08201611fc3565b91610100820151916101208101519161207f6101606120786101408501611fc3565b9301611fc3565b90565b90816020910312611acb57516001600160a01b0381168103611acb5790565b818102929181159184041417156120b457565b634e487b7160e01b600052601160045260246000fd5b919082039182116120b457565b9190826040910312611acb576020825192015190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff1690830152606080840151909116908201526080808301519082015260a0918201519181019190915260c00190565b919082018092116120b457565b6001600160a01b0391821681529116602082015262ffffff909116604082015260600190565b908160c0910312611acb576121ca60a06040519261219184611eaf565b805184526020810151602085015260408101516040850152606081015160608501526121bf60808201611fa1565b608085015201611fa1565b60a082015290565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff1690830152606080840151908301526080808401519091169082015260a0808301516001600160801b03169082015260c0918201519181019190915260e00190565b1561224357505050565b6349c05bd360e11b60005260018060a01b031660045260245260445260646000fd5b51908115158203611acb57565b6001600160a01b039091168152602081019190915260400190565b519061ffff82168203611acb57565b908160e0910312611acb576122b081611fa1565b916122bd60208301611fb5565b916122ca6040820161228d565b916122d76060830161228d565b916122e46080820161228d565b9160a082015160ff81168103611acb5760c061207f919301612265565b1561230a575050565b63cecb194b60e01b60009081526001600160801b039182166004529116602452604490fd5b1561233957505050565b633bd9e3a560e11b60005260018060a01b031660045260245260445260646000fd5b3d15612386573d9061236c82611f39565b9161237a6040519384611f16565b82523d6000602084013e565b606090565b8147106123c7576000918291829182916001600160a01b03165af16123ae61235b565b50156123b657565b630a12f52160e11b60005260046000fd5b63cd78605960e01b6000523060045260246000fd5b3360009081526000805160206137c3833981519152602052604090205460ff161561240357565b63e2517d3f60e01b600052336004526000805160206138a383398151915260245260446000fd5b60008181526000805160206138238339815191526020908152604080832033845290915290205460ff161561245c5750565b63e2517d3f60e01b6000523360045260245260446000fd5b6001600160a01b03811660009081526000805160206137e3833981519152602052604090205460ff166124ea576001600160a01b031660008181526000805160206137e383398151915260205260408120805460ff191660011790553391906000805160206137a38339815191528180a4600190565b50600090565b6001600160a01b03811660009081526000805160206137c3833981519152602052604090205460ff166124ea576001600160a01b031660008181526000805160206137c383398151915260205260408120805460ff191660011790553391906000805160206138a3833981519152906000805160206137a38339815191529080a4600190565b6000818152600080516020613823833981519152602090815260408083206001600160a01b038616845290915290205460ff16612606576000818152600080516020613823833981519152602090815260408083206001600160a01b0395909516808452949091528120805460ff19166001179055339291906000805160206137a38339815191529080a4600190565b5050600090565b6000818152600080516020613823833981519152602090815260408083206001600160a01b038616845290915290205460ff1615612606576000818152600080516020613823833981519152602090815260408083206001600160a01b0395909516808452949091528120805460ff19169055339291907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b60020b6000811215612a2c5780600003905b620d89e88211612a1b576001821615612a11576ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031691600281166129f5575b600481166129d9575b600881166129bd575b601081166129a1575b60208116612985575b60408116612969575b6080811661294d575b6101008116612931575b6102008116612915575b61040081166128f9575b61080081166128dd575b61100081166128c1575b61200081166128a5575b6140008116612889575b618000811661286d575b620100008116612851575b620200008116612836575b62040000811661281b575b6208000016612802575b6000126127dd575b63ffffffff81166127d5576000905b60201c60ff91909116016001600160a01b031690565b6001906127bf565b80156127ec57600019046127b0565b634e487b7160e01b600052601260045260246000fd5b6b048a170391f7dc42444e8fa290910260801c906127a8565b6d2216e584f5fa1ea926041bedfe9890920260801c9161279e565b916e5d6af8dedb81196699c329225ee6040260801c91612793565b916f09aa508b5b7a84e1c677de54f3e99bc90260801c91612788565b916f31be135f97d08fd981231505542fcfa60260801c9161277d565b916f70d869a156d2a1b890bb3df62baf32f70260801c91612773565b916fa9f746462d870fdf8a65dc1f90e061e50260801c91612769565b916fd097f3bdfd2022b8845ad8f792aa58250260801c9161275f565b916fe7159475a2c29b7443b29c7fa6e889d90260801c91612755565b916ff3392b0822b70005940c7a398e4b70f30260801c9161274b565b916ff987a7253ac413176f2b074cf7815e540260801c91612741565b916ffcbe86c7900a88aedcffc83b479aa3a40260801c91612737565b916ffe5dee046a99a2a811c461f1969c30530260801c9161272d565b916fff2ea16466c96a3843ec78b326b528610260801c91612724565b916fff973b41fa98c081472e6896dfb254c00260801c9161271b565b916fffcb9843d60f6159c9db58835c9266440260801c91612712565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c91612709565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91612700565b916ffff97272373d413259a46990580e213a0260801c916126f7565b600160801b6126e4565b6315e4079d60e11b60005260046000fd5b806126bf565b90604051612a3f81611efb565b600081526000602082015260006040820152600060608201526000608082015291805115613389576040810180519091906001600160a01b0316156133785760a08101805160c0830180519293909290916001600160a01b03908116911610613367576000546040516377bd66b560e01b81526001600160a01b039091169390602081600481885afa908115612e6c57600091613348575b5060208301516001600160a01b03168061334257506001600160a01b038116955b516001600160a01b03168061333a57506001600160a01b0316915b612b446020606083019662ffffff88511690868a60405195869485938493630b4c774160e11b85526004850161214e565b03915afa908115612e6c5760009161331b575b50604051633850c7bd60e01b8152936001600160a01b0391909116919060e085600481865afa928315612e6c576004956000946132f1575b5060209060405196878092630d34328160e11b82525afa948515612e6c576000956132b5575b5083516001600160a01b0391821698821689811096909560009590939192908216911680821115806132ae575b61327c575087516001600160a01b03168082101580613274575b613209575060018451998697879c889c5b808510612e78575b8414612d25575b50509351985160009a8b9a6001600160a01b0392831696509091169350915050828211612d16576001600160a01b03811697828911612cd7575050612c62918491613489565b9485925b6001600160801b031660608b015260808a0152828952858415612cc25750612c9792612c9291516120ca565b6120ca565b602087015215612cb25750612cab916120ca565b6040830152565b9050612cbd916120ca565b612cab565b9150612cd292612c9291516120ca565b612c97565b859950838994929996939610600014612d08575090612cfa81612d02938a613489565b97889561355a565b96612c66565b975090612d0291889561355a565b631e3fc6ff60e11b8952600489fd5b60009560c095612d969562ffffff60018060a01b038a541696511660808c01519460405196612d5388611ee0565b8752602087015260408601526060850152608084015260018060801b031660a083015284820152604051948580948193636240e8c760e01b8352600483016121d2565b03925af1908115612e6c57600091612e4d575b508515612e4257612dc083516040830151906120ca565b905b8615612e2a57612df260608201515b608083015185518b516001600160a01b03928316969290811691168661339a565b6001600160801b0386811690821611612e0e575b808080612c1c565b60408201516060909201519a5091985094509250388080612e06565b612df2612e3d85516040840151906120ca565b612dd1565b606081015190612dc2565b612e66915060c03d60c01161072d5761071e8183611f16565b38612da9565b6040513d6000823e3d90fd5b6000612e90612e8787846120ca565b60011c87612141565b60c0612f0160018060a01b038454168d608062ffffff8b511691015160405191612eb983611ee0565b8a835289602084015260408301528560608301528c60808301528d60018060801b031660a083015284820152604051958680948193636240e8c760e01b8352600483016121d2565b03925af1908115612e6c578f938f948c946000946131e9575b5085156131de578d612f3281516040870151906120ca565b905b87156131c957506060850151915b60808601805188519198916001600160a01b03918216911680821161303c575050519051612f7d93506001600160a01b03908116911661342e565b9415612fca5750925b6001600160801b038d811690821611612fa2575b505050612c0d565b939b509b509e509c5097606060408b01519a01519d60018060a01b039051169c388080612f9a565b835160a0840151959991956001600160a01b0391821691168114612ffb575050600181018091116120b45796612f86565b909890935090506001600160801b038d81169082161161301e575b505050612c15565b939b509b509e509c5097606060408b01519a01519d9c388080613016565b8351949592949293926001600160a01b0316908183101561317f575050885191516001600160a01b039283169561308c949387935061307c92168361342e565b93516001600160a01b0316613529565b6001600160801b0382811693919081168085101561310c5750505080966000146130b95750505092612f86565b855160a0860151979b93976001600160a01b0391821693911683146130ed5750505050600181018091116120b45796612f86565b929a5090945091506001600160801b038e161061301e57505050612c15565b989c949891939092908281111561315d575050819b6000146131515760a08601516001600160a01b031683146130ed5750505050600181018091116120b45796612f86565b50505097935092612f86565b949c5092965091935050506001600160801b038e161061301e57505050612c15565b919550915061319293509c94989c613529565b99156131bf5760a08401516001600160a01b03168114612ffb575050600181018091116120b45796612f86565b5097935092612f86565b5160408601516131d8916120ca565b91612f42565b60608401518e612f34565b61320291945060c03d811161072d5761071e8183611f16565b9238612f1a565b9850985050919798509250613243935061323c915060018060a01b0390511661323483518683613529565b94859161355a565b90516120ca565b926040519361325185611efb565b818552602085015260408401526001600160801b03166060830152608082015290565b508715612bfc565b98509850505092509596505061323c6132439260018060a01b03905116936132a68351868361342e565b948591613489565b5087612be2565b9094506020813d6020116132e9575b816132d160209383611f16565b81010312611acb576132e290611fc3565b9338612bb5565b3d91506132c4565b602091945061330e9060e03d60e0116119e8576119d38183611f16565b5050505050509390612b8f565b613334915060203d6020116107c7576107b88183611f16565b38612b57565b905091612b13565b95612af8565b613361915060203d6020116107c7576107b88183611f16565b38612ad7565b631e3fc6ff60e11b60005260046000fd5b6343b70e1d60e11b60005260046000fd5b630cdbe5ed60e11b60005260046000fd5b936001600160a01b0383811690831611613426575b6001600160a01b038581169590831686116133d057505061207f935061342e565b919490939192906001600160a01b038216111561341a5782916133f7916133fd959461342e565b93613529565b6001600160801b038181169083161015613415575090565b905090565b91505061207f92613529565b9091906133af565b61346f92916001600160a01b0380821690831611613483575b61345d6001600160a01b038281169084166135ea565b9190036001600160a01b0316916136ca565b6001600160801b038116908103611acb5790565b90613447565b91906001600160a01b0380821690841611613523575b6001600160a01b038316928315611acb5760609290921b600160601b600160e01b0316916000916001600160a01b0380821692909103166134e18282866136ca565b93821561350f57096134fb575b5090808206151591040190565b6000198210156101575750600101386134ee565b634e487b7160e01b84526012600452602484fd5b9161349f565b61346f9291906001600160a01b0380831690821611613554575b90036001600160a01b031690613639565b90613543565b906001600160a01b03808216908316116135b6575b036001600160a01b0316906000906001600160801b0316613595600160601b84836136ca565b92600160601b91096135a5575090565b600019821015610157575060010190565b9061356f565b60ff6000805160206138838339815191525460401c16156135d957565b631afcd79f60e31b60005260046000fd5b60009190600019828209918082029384808510940393808503941461362f57600160601b8410156101575750600160601b910990828211900360a01b910360601c1790565b5050505060601c90565b600019600160601b8209918160601b918280851094039380850394146136bd5783821115611acb578190600160601b9009818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b5080925015611acb570490565b9160001982840992828102928380861095039480860395146137445784831115611acb57829109818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b505080925015611acb570490565b9061376757508051156123b657805190602001fd5b81511580613799575b613778575090565b639996b31560e01b60009081526001600160a01b0391909116600452602490fd5b50803b1561377056fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0daddc3d4c084f57c5cf32364b1ec8bfe37ef7025c438343cdee471594955c845cb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220a48d06246361356dc48665a27610faca48afe789d4f7e5eaf26bc14274dbfaa964736f6c634300081a0033",
  "deployedBytecode": "0x61016080604052600436101561001e575b50361561001c57600080fd5b005b600090813560e01c90816301ffc9a714611e12575080630fc6a11c14611deb578063248a9ca314611dc457806325656a6314610f005780632f2ff15d14610ece57806336568abe14610e895780633f2b972314610e465780633f4ba83a14610dc457806344fd3939146109325780634f1ef28614610b6057806352d1902d14610af857806354fd4d5014610adc5780635c975abb14610aac5780636881d8cb14610a55578063791b98bc14610a2c5780638456cb59146109a757806391d148541461094e578063a217fddf14610932578063ad3cb1cc146108b8578063aeb4ad551461043e578063c0c53b8b146101b9578063d547741f1461017e578063dd0081c71461015a5763f874225403610010573461015757806003193601126101575760206040516000805160206138a38339815191528152f35b80fd5b5034610157578060031936011261015757602060405168056bc75e2d631000008152f35b5034610157576040366003190112610157576101b560043561019e611e83565b906101b06101ab82611f54565b61242a565b61260d565b5080f35b5034610157576060366003190112610157576101d3611e99565b906101dc611e83565b6044356001600160a01b038116939084900361043a576000805160206138838339815191525493604085901c60ff1615926001600160401b03861680159081610432575b6001149081610428575b15908161041f575b50610410576001600160401b03198616600117600080516020613883833981519152559394929361038a93856103e7575b5061026c6135bc565b6102746135bc565b61027c6135bc565b6102846135bc565b60ff196000805160206138438339815191525416600080516020613843833981519152556102b06135bc565b6102b86135bc565b60016000805160206138638339815191525560018060a01b031660018060a01b031986541617855560018060a01b031960015416176001556000805160206138a383398151915284526000805160206138238339815191526020528360016040822001546000805160206138a383398151915282526000805160206138238339815191526020528160016040822001556000805160206138a38339815191527fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff8380a461038481612474565b506124f0565b506103925780f35b60ff60401b196000805160206138838339815191525416600080516020613883833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6001600160481b0319166001600160401b01176000805160206138838339815191525538610263565b63f92ee8a960e01b8552600485fd5b90501538610232565b303b15915061022a565b859150610220565b8280fd5b5034610157576080366003190112610157576004359081156108a95760443568056bc75e2d63100000811161089a576064359268056bc75e2d63100000841161088b5760015460405163133f757160e31b8152602480356004830152909161018091839182906001600160a01b03165afa94851561088057849385869387908899610831575b506104d16104d7916126ad565b986126ad565b87546040516377bd66b560e01b815291979190602090829060049082906001600160a01b03165afa908115610792578991610812575b506001600160a01b03828116911690811490819081156107ff575b50156107f0579161054e9168056bc75e2d63100000936000146107e85750925b866120a1565b049384156107d95790610564856105b7936120ca565b9562ffffff6040519261057684611ee0565b888452602084018a90526001600160a01b039081166040850181905296909116606084018190526080840186905299811660a08401521660c0820152612a32565b9560018060a01b038654169360405190630b4c774160e11b8252876004830152846024830152826044830152602082606481895afa9182156107ce57889261079d575b506080890151604051630d34328160e11b81526001600160a01b0391821693909160209183916004918391165afa908115610792578991610754575b5060608a01516001600160801b039182169082160193908411610740579260c095926106b195928a98956040519561066d87611ee0565b8a8752602087015260408601526060850152608084015260018060801b031660a083015284820152604051948580948193636240e8c760e01b8352600483016121d2565b03925af192831561073457926106ff575b506106fb906106ee60608401519360406106e560208289015198015180956120ca565b91015190612141565b9060405194859485611e67565b0390f35b6106fb9192506107269060c03d60c01161072d575b61071e8183611f16565b810190612174565b91906106c2565b503d610714565b604051903d90823e3d90fd5b634e487b7160e01b89526011600452602489fd5b90506020813d60201161078a575b8161076f60209383611f16565b810103126107865761078090611fc3565b38610636565b8880fd5b3d9150610762565b6040513d8b823e3d90fd5b6107c091925060203d6020116107c7575b6107b88183611f16565b810190612082565b90386105fa565b503d6107ae565b6040513d8a823e3d90fd5b630cdbe5ed60e11b8752600487fd5b905092610548565b630b9b5c2560e21b8952600489fd5b6001600160a01b03851614905038610528565b61082b915060203d6020116107c7576107b88183611f16565b3861050d565b9150506108619197506104d195506104d793506101803d8111610879575b6108598183611f16565b810190611fd7565b50505050509b955096929093509790929591506104c4565b503d61084f565b6040513d86823e3d90fd5b63fc46777360e01b8352600483fd5b633de9f84960e01b8252600482fd5b630cdbe5ed60e11b8152600490fd5b503461015757806003193601126101575760408051916108d88284611f16565b60058352640352e302e360dc1b6020840152815192839160208352815191826020850152815b83811061091b575050828201840152601f01601f19168101030190f35b6020828201810151888301880152879550016108fe565b5034610157578060031936011261015757602090604051908152f35b503461015757604036600319011261015757604061096a611e83565b916004358152600080516020613823833981519152602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b50346101575780600319360112610157576109c06123dc565b6000805160206138438339815191525460ff8116610a1d5760019060ff191617600080516020613843833981519152557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b63d93c066560e01b8252600482fd5b50346101575780600319360112610157576001546040516001600160a01b039091168152602090f35b503461015757602036600319011261015757610a6f611e99565b610a776123dc565b6001600160a01b03168015610a9d57600180546001600160a01b03191691909117905580f35b6343b70e1d60e11b8252600482fd5b5034610157578060031936011261015757602060ff60008051602061384383398151915254166040519015158152f35b5034610157578060031936011261015757602060405160018152f35b50346101575780600319360112610157577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610b515760206040516000805160206138038339815191528152f35b63703e46dd60e11b8152600490fd5b50604036600319011261015757610b75611e99565b602435906001600160401b03821161043a573660238301121561043a5781600401359083610ba283611f39565b93610bb06040519586611f16565b8385526020850193366024828401011161043a57806024602093018637850101526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016308114908115610da1575b50610d925783805260008051602061382383398151915260209081526040808620336000908152925290205460ff1615610d7a576040516352d1902d60e01b81526001600160a01b0382169390602081600481885afa869181610d42575b50610c7d57634c9c8ce360e01b86526004859052602486fd5b9384600080516020613803833981519152879603610d305750823b15610d1e5760008051602061380383398151915280546001600160a01b031916821790558491907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8380a2805115610d03576101b59382915190845af4610cfd61235b565b91613752565b5050505034610d0f5780f35b63b398979f60e01b8152600490fd5b634c9c8ce360e01b8552600452602484fd5b632a87526960e21b8652600452602485fd5b9091506020813d602011610d72575b81610d5e60209383611f16565b81010312610d6e57519038610c64565b8680fd5b3d9150610d51565b63e2517d3f60e01b8452336004526024849052604484fd5b63703e46dd60e11b8452600484fd5b600080516020613803833981519152546001600160a01b03161415905038610c06565b5034610157578060031936011261015757610ddd6123dc565b6000805160206138438339815191525460ff811615610e375760ff1916600080516020613843833981519152557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b638dfc202b60e01b8252600482fd5b503461015757602036600319011261015757610e60611e99565b610e686123dc565b6001600160a01b03168015610a9d5781546001600160a01b03191617815580f35b503461015757604036600319011261015757610ea3611e83565b336001600160a01b03821603610ebf576101b59060043561260d565b63334bd91960e11b8252600482fd5b5034610157576040366003190112610157576101b5600435610eee611e83565b90610efb6101ab82611f54565b612576565b5060a03660031901126101575760026000805160206138638339815191525414611db55760026000805160206138638339815191525534156108a9576024359068056bc75e2d631000008211611da65768056bc75e2d6310000060443511611d97576001600160a01b03610f72611f75565b1615611d88576001600160a01b03610f88611f8b565b1615611d885760018060a01b0360015416906004356040519163133f757160e31b835281600484015261018083602481875afa9283156117d5578182918395611d56575b5082546040516377bd66b560e01b815290602090829060049082906001600160a01b03165afa908115610880578491611d37575b506001600160a01b0382811691169081149081908115611d24575b5015611d1557916110419168056bc75e2d6310000093600014611d0d5750965b346120a1565b046101005261010051156108a95761105c61010051346120ca565b6040519461106986611eaf565b81865282602087015260018060a01b038716604087015262ffffff851660608701526080860193604435855260a08701528115611cfe5760208601516001600160a01b031615611cd4575b61018060a087015160246040518094819363133f757160e31b835260048301525afa90811561191b5783908492611c9e575b506110f36110f9916126ad565b916126ad565b90611166875160018060a01b0360208a01511660018060a01b0360408b01511662ffffff60608c015116908951926040519461113486611ee0565b855260208501526040840152606083015260808201526001600160a01b0383811660a0830152841660c0820152612a32565b610120819052606001516001600160801b031615611c8f578391849561012051519081611bcf575b505061012051518303611bc05784546040516377bd66b560e01b8152929190602090849060049082906001600160a01b03165afa928315611bb5578693611b94575b5060208901516001600160a01b031680611b8e57506001600160a01b038316965b60408a01516001600160a01b031680611b8457506001600160a01b0384169461121c905b8b516120ca565b60208b01519091906001600160a01b031615611b36575b6001600160a01b03868116908a161015611b2f5788905b6001600160a01b03878116908b161015611b285786925b6101408a90526001600160a01b03888116908c161015611b1e5780610140525b60c08a90526001600160a01b03888116908c161015611b15575060c0525b6040516370a0823160e01b81523060048201526020816024816001600160a01b0386165afa908115610792578991611ae3575b506040516370a0823160e01b8152306004820152906020826024816001600160a01b0388165afa918215611ad857908a9392918492611a98575b50916113396113699261132c602095610140518561014051831015612239565b60c0518781831015612239565b60015460405163095ea7b360e01b815261014051909586948593919284926001600160a01b031660048401612272565b03926001600160a01b03165af180156107ce5790889291611a50575b5060015460405163095ea7b360e01b815260c05190936020938593909284929183916113bd916001600160a01b031660048401612272565b03926001600160a01b03165af180156119ef57611a19575b50855460608a0151604051630b4c774160e11b81529160209183916001600160a01b031690829081906114129062ffffff168b8f6004850161214e565b03915afa9081156119ef576004929160e09189916119fa575b50604051633850c7bd831b815293849182906001600160a01b03165afa9182156119ef579161148c939161146f9389926119b8575b5060c05192610140519261339a565b61012051606001516001600160801b039081169082168114612301565b60018060a01b0360015416606060a060c4818b0151604051906114ae82611eaf565b815261014051602082015260c05160408201528884820152886080820152428382015288604051958694859363219f5d1760e01b855280516004860152602081015160248601526040810151604486015287810151606486015260808101516084860152015160a48401525af19081156119ad578560a0528560e0528591611959575b506001600160a01b0383811690871610156119455761155560e051610140516120ca565b9586935b6001600160a01b039081169116101561192f576115789060c0516120ca565b965b610120516060015160a05161159e916001600160801b039081169082168114612301565b6115bf83602061012051015160018060a01b0360208501511681831461232f565b6115e088604061012051015160018060a01b0360408501511681831461232f565b602001516001600160a01b03161580611926575b6118b9575b50611603916120ca565b928261189a575b846117e2575b8154611689949392916040916001600160a01b031661162d611f75565b62ffffff84519361163d85611eaf565b8685526001600160a01b038c8116602087015291168585015216606083015261010051608083015260443560a08301528251635ad08fe560e11b815296879283918291600483016120ed565b039161010051905af19384156117d55781946117a1575b506116ae81610100516120ca565b9283611792575b6116bf8282612141565b936116d3816116ce8688612141565b612141565b340361176e5750949593946106fb946001600160a01b036116f2611f75565b1691604051938452876020850152604084015260018060801b0360a0511660608401528360808401528760a084015260018060a01b0316917f3c5d8e2b4dedd285c347941d3f9f922359ba9821c0db27bbd73c8d2090191e4e60c03392a460016000805160206138638339815191525560405194859485611e67565b6040516318a91f2160e01b815290819061178e9086883460048601611e67565b0390fd5b61179c843361238b565b6116b5565b90506117c691935060403d6040116117ce575b6117be8183611f16565b8101906120d7565b9290386116a0565b503d6117b4565b50604051903d90823e3d90fd5b61184782806117ef611f8b565b604051611820816118128c602083019563a9059cbb60e01b875260248401612272565b03601f198101835282611f16565b5190826001600160a01b038c165af161183761235b565b906001600160a01b038916613752565b8051908115159182611877575b50501561161057635274afe760e01b82526001600160a01b038616600452602482fd5b819250906020918101031261043a5760206118929101612265565b153880611854565b6118b4836001600160a01b036118ae611f8b565b1661238b565b61160a565b6001600160a01b03169050803b1561043a57828091602460405180948193632e1a7d4d60e01b83528960048401525af1801561191b57849184916118fe575b506115f9565b8192509061190b91611f16565b611917578282386118f8565b5080fd5b6040513d85823e3d90fd5b508115156115f4565b5061193f60e051610140516120ca565b9661157a565b6119518160c0516120ca565b958693611559565b90506060813d6060116119a5575b8161197460609383611f16565b810103126119a15761198581611fc3565b6040602083015192015160805260a05260e05260805138611531565b8480fd5b3d9150611967565b6040513d87823e3d90fd5b6119db91925060e03d60e0116119e8575b6119d38183611f16565b81019061229c565b5050505050509038611460565b503d6119c9565b6040513d89823e3d90fd5b611a13915060203d6020116107c7576107b88183611f16565b3861142b565b6020813d602011611a48575b81611a3260209383611f16565b81010312610d6e57611a4390612265565b6113d5565b3d9150611a25565b9091506020813d602011611a90575b81611a6c60209383611f16565b81010312611a8c576113bd8892611a84602093612265565b509150611385565b8780fd5b3d9150611a5f565b92935090506020823d602011611ad0575b81611ab660209383611f16565b81010312611acb57905189929161133961130c565b600080fd5b3d9150611aa9565b6040513d8c823e3d90fd5b90506020813d602011611b0d575b81611afe60209383611f16565b81010312611acb5751386112d2565b3d9150611af1565b60c0525061129f565b8161014052611281565b8992611261565b859061124a565b6001600160a01b038516803b1561078657888391600460405180948193630d0e30db60e41b83525af1801561079257611b70575b50611233565b88611b7d91999299611f16565b9638611b6a565b61121c9095611215565b966111f1565b611bae91935060203d6020116107c7576107b88183611f16565b91386111d0565b6040513d88823e3d90fd5b630be69f0160e41b8552600485fd5b865460208b01516040808d015160608e015194518251969c509698509095611c4d956001600160a01b03948516959094919362ffffff9091169282169116611c1685611eaf565b845260208401528583015230606083015289608083015260a08201528351988980948193635ad08fe560e11b8352600483016120ed565b03925af180156108805784958591611c6a575b509491388061118e565b9050611c8691955060403d6040116117ce576117be8183611f16565b94909438611c60565b63439f137760e11b8452600484fd5b6110f392506110f99150611cc0906101803d8111610879576108598183611f16565b5050505050979550935050505091506110e6565b8551803410611ce357506110b4565b6349c05bd360e11b8452600484905260245234604452606483fd5b630cdbe5ed60e11b8352600483fd5b90509661103b565b630b9b5c2560e21b8452600484fd5b6001600160a01b0385161490503861101b565b611d50915060203d6020116107c7576107b88183611f16565b38611000565b915050611d739193506101803d8111610879576108598183611f16565b50505050505050925094925093909338610fcc565b6343b70e1d60e11b8152600490fd5b63fc46777360e01b8152600490fd5b633de9f84960e01b8152600490fd5b633ee5aeb560e01b8152600490fd5b5034610157576020366003190112610157576020611de3600435611f54565b604051908152f35b5034610157578060031936011261015757546040516001600160a01b039091168152602090f35b9050346119175760203660031901126119175760043563ffffffff60e01b811680910361043a5760209250637965db0b60e01b8114908115611e56575b5015158152f35b6301ffc9a760e01b14905038611e4f565b9094939260609260808301968352602083015260408201520152565b602435906001600160a01b0382168203611acb57565b600435906001600160a01b0382168203611acb57565b60c081019081106001600160401b03821117611eca57604052565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117611eca57604052565b60a081019081106001600160401b03821117611eca57604052565b601f909101601f19168101906001600160401b03821190821017611eca57604052565b6001600160401b038111611eca57601f01601f191660200190565b60005260008051602061382383398151915260205260016040600020015490565b6064356001600160a01b0381168103611acb5790565b6084356001600160a01b0381168103611acb5790565b51906001600160a01b0382168203611acb57565b51908160020b8203611acb57565b51906001600160801b0382168203611acb57565b919082610180910312611acb5781516001600160601b0381168103611acb579161200360208201611fa1565b9161201060408301611fa1565b9161201d60608201611fa1565b91608082015162ffffff81168103611acb579161203c60a08201611fb5565b9161204960c08301611fb5565b9161205660e08201611fc3565b91610100820151916101208101519161207f6101606120786101408501611fc3565b9301611fc3565b90565b90816020910312611acb57516001600160a01b0381168103611acb5790565b818102929181159184041417156120b457565b634e487b7160e01b600052601160045260246000fd5b919082039182116120b457565b9190826040910312611acb576020825192015190565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff1690830152606080840151909116908201526080808301519082015260a0918201519181019190915260c00190565b919082018092116120b457565b6001600160a01b0391821681529116602082015262ffffff909116604082015260600190565b908160c0910312611acb576121ca60a06040519261219184611eaf565b805184526020810151602085015260408101516040850152606081015160608501526121bf60808201611fa1565b608085015201611fa1565b60a082015290565b81516001600160a01b03908116825260208084015182169083015260408084015162ffffff1690830152606080840151908301526080808401519091169082015260a0808301516001600160801b03169082015260c0918201519181019190915260e00190565b1561224357505050565b6349c05bd360e11b60005260018060a01b031660045260245260445260646000fd5b51908115158203611acb57565b6001600160a01b039091168152602081019190915260400190565b519061ffff82168203611acb57565b908160e0910312611acb576122b081611fa1565b916122bd60208301611fb5565b916122ca6040820161228d565b916122d76060830161228d565b916122e46080820161228d565b9160a082015160ff81168103611acb5760c061207f919301612265565b1561230a575050565b63cecb194b60e01b60009081526001600160801b039182166004529116602452604490fd5b1561233957505050565b633bd9e3a560e11b60005260018060a01b031660045260245260445260646000fd5b3d15612386573d9061236c82611f39565b9161237a6040519384611f16565b82523d6000602084013e565b606090565b8147106123c7576000918291829182916001600160a01b03165af16123ae61235b565b50156123b657565b630a12f52160e11b60005260046000fd5b63cd78605960e01b6000523060045260246000fd5b3360009081526000805160206137c3833981519152602052604090205460ff161561240357565b63e2517d3f60e01b600052336004526000805160206138a383398151915260245260446000fd5b60008181526000805160206138238339815191526020908152604080832033845290915290205460ff161561245c5750565b63e2517d3f60e01b6000523360045260245260446000fd5b6001600160a01b03811660009081526000805160206137e3833981519152602052604090205460ff166124ea576001600160a01b031660008181526000805160206137e383398151915260205260408120805460ff191660011790553391906000805160206137a38339815191528180a4600190565b50600090565b6001600160a01b03811660009081526000805160206137c3833981519152602052604090205460ff166124ea576001600160a01b031660008181526000805160206137c383398151915260205260408120805460ff191660011790553391906000805160206138a3833981519152906000805160206137a38339815191529080a4600190565b6000818152600080516020613823833981519152602090815260408083206001600160a01b038616845290915290205460ff16612606576000818152600080516020613823833981519152602090815260408083206001600160a01b0395909516808452949091528120805460ff19166001179055339291906000805160206137a38339815191529080a4600190565b5050600090565b6000818152600080516020613823833981519152602090815260408083206001600160a01b038616845290915290205460ff1615612606576000818152600080516020613823833981519152602090815260408083206001600160a01b0395909516808452949091528120805460ff19169055339291907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b60020b6000811215612a2c5780600003905b620d89e88211612a1b576001821615612a11576ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031691600281166129f5575b600481166129d9575b600881166129bd575b601081166129a1575b60208116612985575b60408116612969575b6080811661294d575b6101008116612931575b6102008116612915575b61040081166128f9575b61080081166128dd575b61100081166128c1575b61200081166128a5575b6140008116612889575b618000811661286d575b620100008116612851575b620200008116612836575b62040000811661281b575b6208000016612802575b6000126127dd575b63ffffffff81166127d5576000905b60201c60ff91909116016001600160a01b031690565b6001906127bf565b80156127ec57600019046127b0565b634e487b7160e01b600052601260045260246000fd5b6b048a170391f7dc42444e8fa290910260801c906127a8565b6d2216e584f5fa1ea926041bedfe9890920260801c9161279e565b916e5d6af8dedb81196699c329225ee6040260801c91612793565b916f09aa508b5b7a84e1c677de54f3e99bc90260801c91612788565b916f31be135f97d08fd981231505542fcfa60260801c9161277d565b916f70d869a156d2a1b890bb3df62baf32f70260801c91612773565b916fa9f746462d870fdf8a65dc1f90e061e50260801c91612769565b916fd097f3bdfd2022b8845ad8f792aa58250260801c9161275f565b916fe7159475a2c29b7443b29c7fa6e889d90260801c91612755565b916ff3392b0822b70005940c7a398e4b70f30260801c9161274b565b916ff987a7253ac413176f2b074cf7815e540260801c91612741565b916ffcbe86c7900a88aedcffc83b479aa3a40260801c91612737565b916ffe5dee046a99a2a811c461f1969c30530260801c9161272d565b916fff2ea16466c96a3843ec78b326b528610260801c91612724565b916fff973b41fa98c081472e6896dfb254c00260801c9161271b565b916fffcb9843d60f6159c9db58835c9266440260801c91612712565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c91612709565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91612700565b916ffff97272373d413259a46990580e213a0260801c916126f7565b600160801b6126e4565b6315e4079d60e11b60005260046000fd5b806126bf565b90604051612a3f81611efb565b600081526000602082015260006040820152600060608201526000608082015291805115613389576040810180519091906001600160a01b0316156133785760a08101805160c0830180519293909290916001600160a01b03908116911610613367576000546040516377bd66b560e01b81526001600160a01b039091169390602081600481885afa908115612e6c57600091613348575b5060208301516001600160a01b03168061334257506001600160a01b038116955b516001600160a01b03168061333a57506001600160a01b0316915b612b446020606083019662ffffff88511690868a60405195869485938493630b4c774160e11b85526004850161214e565b03915afa908115612e6c5760009161331b575b50604051633850c7bd60e01b8152936001600160a01b0391909116919060e085600481865afa928315612e6c576004956000946132f1575b5060209060405196878092630d34328160e11b82525afa948515612e6c576000956132b5575b5083516001600160a01b0391821698821689811096909560009590939192908216911680821115806132ae575b61327c575087516001600160a01b03168082101580613274575b613209575060018451998697879c889c5b808510612e78575b8414612d25575b50509351985160009a8b9a6001600160a01b0392831696509091169350915050828211612d16576001600160a01b03811697828911612cd7575050612c62918491613489565b9485925b6001600160801b031660608b015260808a0152828952858415612cc25750612c9792612c9291516120ca565b6120ca565b602087015215612cb25750612cab916120ca565b6040830152565b9050612cbd916120ca565b612cab565b9150612cd292612c9291516120ca565b612c97565b859950838994929996939610600014612d08575090612cfa81612d02938a613489565b97889561355a565b96612c66565b975090612d0291889561355a565b631e3fc6ff60e11b8952600489fd5b60009560c095612d969562ffffff60018060a01b038a541696511660808c01519460405196612d5388611ee0565b8752602087015260408601526060850152608084015260018060801b031660a083015284820152604051948580948193636240e8c760e01b8352600483016121d2565b03925af1908115612e6c57600091612e4d575b508515612e4257612dc083516040830151906120ca565b905b8615612e2a57612df260608201515b608083015185518b516001600160a01b03928316969290811691168661339a565b6001600160801b0386811690821611612e0e575b808080612c1c565b60408201516060909201519a5091985094509250388080612e06565b612df2612e3d85516040840151906120ca565b612dd1565b606081015190612dc2565b612e66915060c03d60c01161072d5761071e8183611f16565b38612da9565b6040513d6000823e3d90fd5b6000612e90612e8787846120ca565b60011c87612141565b60c0612f0160018060a01b038454168d608062ffffff8b511691015160405191612eb983611ee0565b8a835289602084015260408301528560608301528c60808301528d60018060801b031660a083015284820152604051958680948193636240e8c760e01b8352600483016121d2565b03925af1908115612e6c578f938f948c946000946131e9575b5085156131de578d612f3281516040870151906120ca565b905b87156131c957506060850151915b60808601805188519198916001600160a01b03918216911680821161303c575050519051612f7d93506001600160a01b03908116911661342e565b9415612fca5750925b6001600160801b038d811690821611612fa2575b505050612c0d565b939b509b509e509c5097606060408b01519a01519d60018060a01b039051169c388080612f9a565b835160a0840151959991956001600160a01b0391821691168114612ffb575050600181018091116120b45796612f86565b909890935090506001600160801b038d81169082161161301e575b505050612c15565b939b509b509e509c5097606060408b01519a01519d9c388080613016565b8351949592949293926001600160a01b0316908183101561317f575050885191516001600160a01b039283169561308c949387935061307c92168361342e565b93516001600160a01b0316613529565b6001600160801b0382811693919081168085101561310c5750505080966000146130b95750505092612f86565b855160a0860151979b93976001600160a01b0391821693911683146130ed5750505050600181018091116120b45796612f86565b929a5090945091506001600160801b038e161061301e57505050612c15565b989c949891939092908281111561315d575050819b6000146131515760a08601516001600160a01b031683146130ed5750505050600181018091116120b45796612f86565b50505097935092612f86565b949c5092965091935050506001600160801b038e161061301e57505050612c15565b919550915061319293509c94989c613529565b99156131bf5760a08401516001600160a01b03168114612ffb575050600181018091116120b45796612f86565b5097935092612f86565b5160408601516131d8916120ca565b91612f42565b60608401518e612f34565b61320291945060c03d811161072d5761071e8183611f16565b9238612f1a565b9850985050919798509250613243935061323c915060018060a01b0390511661323483518683613529565b94859161355a565b90516120ca565b926040519361325185611efb565b818552602085015260408401526001600160801b03166060830152608082015290565b508715612bfc565b98509850505092509596505061323c6132439260018060a01b03905116936132a68351868361342e565b948591613489565b5087612be2565b9094506020813d6020116132e9575b816132d160209383611f16565b81010312611acb576132e290611fc3565b9338612bb5565b3d91506132c4565b602091945061330e9060e03d60e0116119e8576119d38183611f16565b5050505050509390612b8f565b613334915060203d6020116107c7576107b88183611f16565b38612b57565b905091612b13565b95612af8565b613361915060203d6020116107c7576107b88183611f16565b38612ad7565b631e3fc6ff60e11b60005260046000fd5b6343b70e1d60e11b60005260046000fd5b630cdbe5ed60e11b60005260046000fd5b936001600160a01b0383811690831611613426575b6001600160a01b038581169590831686116133d057505061207f935061342e565b919490939192906001600160a01b038216111561341a5782916133f7916133fd959461342e565b93613529565b6001600160801b038181169083161015613415575090565b905090565b91505061207f92613529565b9091906133af565b61346f92916001600160a01b0380821690831611613483575b61345d6001600160a01b038281169084166135ea565b9190036001600160a01b0316916136ca565b6001600160801b038116908103611acb5790565b90613447565b91906001600160a01b0380821690841611613523575b6001600160a01b038316928315611acb5760609290921b600160601b600160e01b0316916000916001600160a01b0380821692909103166134e18282866136ca565b93821561350f57096134fb575b5090808206151591040190565b6000198210156101575750600101386134ee565b634e487b7160e01b84526012600452602484fd5b9161349f565b61346f9291906001600160a01b0380831690821611613554575b90036001600160a01b031690613639565b90613543565b906001600160a01b03808216908316116135b6575b036001600160a01b0316906000906001600160801b0316613595600160601b84836136ca565b92600160601b91096135a5575090565b600019821015610157575060010190565b9061356f565b60ff6000805160206138838339815191525460401c16156135d957565b631afcd79f60e31b60005260046000fd5b60009190600019828209918082029384808510940393808503941461362f57600160601b8410156101575750600160601b910990828211900360a01b910360601c1790565b5050505060601c90565b600019600160601b8209918160601b918280851094039380850394146136bd5783821115611acb578190600160601b9009818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b5080925015611acb570490565b9160001982840992828102928380861095039480860395146137445784831115611acb57829109818060000316809204600281600302188082026002030280820260020302808202600203028082026002030280820260020302809102600203029360018380600003040190848311900302920304170290565b505080925015611acb570490565b9061376757508051156123b657805190602001fd5b81511580613799575b613778575090565b639996b31560e01b60009081526001600160a01b0391909116600452602490fd5b50803b1561377056fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0daddc3d4c084f57c5cf32364b1ec8bfe37ef7025c438343cdee471594955c845cb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a2646970667358221220a48d06246361356dc48665a27610faca48afe789d4f7e5eaf26bc14274dbfaa964736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updatePositionManager(address)": {
        "params": {
          "newPositionManager": "The address of the new Uniswap position manager contract"
        }
      },
      "updateSwapHelper(address)": {
        "params": {
          "newSwapHelper": "The address of the new swap helper contract"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "returns": {
          "_0": "The version of the contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address)": {
        "notice": "Initializes the contract"
      },
      "pause()": {
        "notice": "Pauses the contract"
      },
      "positionManager()": {
        "notice": "Returns the address of the Uniswap position manager contract"
      },
      "swapHelper()": {
        "notice": "Returns the address of the swap helper contract"
      },
      "unpause()": {
        "notice": "Unpauses the contract"
      },
      "updatePositionManager(address)": {
        "notice": "Updates the address of the Uniswap position manager contract"
      },
      "updateSwapHelper(address)": {
        "notice": "Updates the address of the swap helper contract"
      },
      "version()": {
        "notice": "Returns the current version of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8654,
        "contract": "contracts/dlpRewardSwap/DLPRewardSwapImplementation.sol:DLPRewardSwapImplementation",
        "label": "swapHelper",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwapHelper)10772"
      },
      {
        "astId": 8658,
        "contract": "contracts/dlpRewardSwap/DLPRewardSwapImplementation.sol:DLPRewardSwapImplementation",
        "label": "positionManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(INonfungiblePositionManager)9067"
      }
    ],
    "types": {
      "t_contract(INonfungiblePositionManager)9067": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapHelper)10772": {
        "encoding": "inplace",
        "label": "contract ISwapHelper",
        "numberOfBytes": "20"
      }
    }
  }
}